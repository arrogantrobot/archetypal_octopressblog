<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Archetypal]]></title>
  <link href="http://archetyp.al/atom.xml" rel="self"/>
  <link href="http://archetyp.al/"/>
  <updated>2013-04-06T00:23:27-05:00</updated>
  <id>http://archetyp.al/</id>
  <author>
    <name><![CDATA[Rob Long]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Digital Ocean hosting: error 2002 can't connect with local server, and a solution]]></title>
    <link href="http://archetyp.al/blog/2013/03/21/bad-mysql-install-error-2002-cannot-connect-with-local-server/"/>
    <updated>2013-03-21T00:12:00-05:00</updated>
    <id>http://archetyp.al/blog/2013/03/21/bad-mysql-install-error-2002-cannot-connect-with-local-server</id>
    <content type="html"><![CDATA[<p>I have recently started using <a href="https://www.digitalocean.com/" title="Digital Ocean">Digital Ocean</a> for hosting. I was previously using the free <a href="http://www.heroku.com/" title="Heroku">Heroku</a> hosting, which I liked very much. The DNS was a bit tricky to set up, but once it got configured, it was smooth. I was able to get a one second load time for the archetyp.al index. It&#8217;s all static files, but I was still happy with Heroku, especially for free. However, I&#8217;ve been diving much deeper into web development lately, and I&#8217;ve decided I need a larger base of operations on the web, and Digital Ocean was at the top of my short list of candidates (along with dreamhost and linode). The SSD&#8217;s on every machine is what finally sold me.</p>

<p>I&#8217;ve been working on a rails project lately, and I need a dev machine on the cloud for testing purposes. So I found myself needing to set up a rails environment on my new Digital Ocean instance. I naturally went with my friend <a href="http://excid3.com/" title="excid3">chris&#8217;s</a> excellent blog on <a href="http://excid3.com/blog/setting-up-rails-on-ubuntu-12-10-quantal-quetzal-with-ruby-node-js-nginx-passenger-and-mysql-or-postgres/#.UUqZKXGGggR" title="excid3 on rails setup">setting up rails for Ubuntu 12.10 with NginX, etc</a>. I decided to go with MySQL instead of postgres.</p>

<!-- more -->


<h2>ERROR 2002 (HY000): Can&#8217;t connect to local MySQL server through socket &#8216;/var/run/mysqld/mysqld.sock&#8217;</h2>

<p>When I went through the steps outlined in Chris&#8217;s blog, I encountered a few snags, including an issue where I couldn&#8217;t compile Nginx with Passenger support because I didn&#8217;t have enough ram (I&#8217;ll write about this soon). I was able to finish after some tinkering. So when it came time to &#8216;rake db:migrate&#8217;, I pushed button and did NOT receive bacon:</p>

<figure class='code'><figcaption><span>ERROR 2002 (HY000) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[rob@mandelbrot ~ ] sudo mysql -u root -p
</span><span class='line'>ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock'</span></code></pre></td></tr></table></div></figure>


<p>Naturally, I went through the various steps one takes when cryptic error messages arise. I checked to see if the mysql process was running:</p>

<figure class='code'><figcaption><span>No MySQL process running </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ rob@mandelbrot ~ ] ps aux | grep mysql
</span><span class='line'>rob      11749  0.0  0.0   9388   884 pts/1    S+   00:40   0:00 grep --color=auto mysql</span></code></pre></td></tr></table></div></figure>


<p>Indeed, the process was not running. Right. So at least the basic problem is known now, the mysql-server process itself is not running. So what next? Well, let&#8217;s try to start it!</p>

<figure class='code'><figcaption><span>service restart failed.. </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ rob@mandelbrot ~ ] sudo service mysql start
</span><span class='line'>start: Job failed to start</span></code></pre></td></tr></table></div></figure>


<p>Again, no bacon. So I then attempted to re-install the mysql-server package.</p>

<figure class='code'><figcaption><span>purge mysql-servr package </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ rob@mandelbrot ~ ] sudo apt-get remove mysql-server --purge</span></code></pre></td></tr></table></div></figure>


<p>Again, negative in the bacon dimension. The same results from attempting to start the mysql service. Then finally, I came across the right answer on the <a href="http://askubuntu.com/a/213353" title="askubuntu">askubuntu</a> stack exchange site. After stumbling through many forum threads where the complete removal of mysql-server was never quite reached, askubutu came through:</p>

<figure class='code'><figcaption><span>completely remove mysql-server for real </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get purge mysql-server mysql-common
</span><span class='line'>sudo rm -rf /var/lib/mysql
</span><span class='line'>sudo apt-get clean
</span><span class='line'>sudo apt-get install mysql-server</span></code></pre></td></tr></table></div></figure>


<p>That finally did it. After going through the setup process again, I had a working database server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gypsies and Jet-setters: Bruce Sterling at 2006 SXSW]]></title>
    <link href="http://archetyp.al/blog/2013/03/06/gypsies-and-jet-setters-bruce-sterling-at-2006-sxsw/"/>
    <updated>2013-03-06T00:04:00-06:00</updated>
    <id>http://archetyp.al/blog/2013/03/06/gypsies-and-jet-setters-bruce-sterling-at-2006-sxsw</id>
    <content type="html"><![CDATA[<p>This is the first Bruce Sterling talk that I encountered. Now I&#8217;m an inveterate Sterlingite, but at the time, 2006, I had only barely crossed intellectual paths with Sterling. I downloaded it with some long dead, precambrian cousin of google reader that lived in the swamps and estuaries of windows computers and survived by allowing the user to view RSS feeds on his desktop. Then pushed it to my equally antediluvian, single purpose device, an Archos mp3 player. I listened to this talk many times before the Archos died off. I thought this audio was lost to the bit bucket of history, until one day&#8230; <a href="http://archive.org/" title="archive dot org">archive.org</a>. These people are the new Library of Alexandria, with podcasts instead of papyrus.</p>

<p><a href="http://archive.org/details/BruceSterlingSxswKeynoteSpeechTheStateOfTheWorld" title="Bruce Sterling Sxsw Keynote, 2006 at archive.org">The full mp3 is available here.</a></p>

<!-- more -->


<p>Here are some excerpts:</p>

<blockquote><p>Commons based peer production, as an industrial method, is getting it&#8217;s legs under it. This is something I complained about for years. I used to complain that GNU had the wrong name, because the recursive name for GNU is GNU&#8217;s Not Unix. And I describe that as rather childish, because you should not name yourself in opposition to something else, you should have your own name. It&#8217;s like, if GNU&#8217;s not Unix, what is it?</p><p>Well, it&#8217;s commons based peer production.</p></blockquote>




<blockquote><p>Flickr is not a copy of anything else. It is not a hippie knockoff of a commercial product. Wikipedia is not like anything else. A wiki is like nothing known to mankind. Collaborative web-filters are very spooky things; they are without historical precedent. Websites that throw their API&#8217;s open and turn themselves into platforms rather than sites&#8230; it is a little hard to explain the significance of that to everyday people who are not techies and programmers, but that is a major development. The net community is no longer hanging on the coat-tails of Gates. That monopolistic chokehold, that did so much to reduce innovation, and to introduce global criminality to hapless Windows users.</p></blockquote>




<blockquote><p>Only in the United States do dying phone companies lobby the government as if they were indian casinos.</p></blockquote>




<blockquote><p>As you may or may not know, I am spending a lot of my time in Europe, after spending a year in California. I get to see America from the outside now. I get to see America as 94% of the planet sees America. And I look at wireless spreading in London and the spread of broadband in Korea. I&#8217;ve got broadband in Serbia where the phone companies are literally run by criminals in exile. And my broadband in Serbia costs $20 a month. And it works.</p></blockquote>




<blockquote><p>It is decadent, it is sclerotic. It looks like the Soviet Union.</p><p>&#8230;they are turning the USA into a banana republic with rockets.</p><p>Not just politically backward, <em>technically</em> backward.</p></blockquote>




<blockquote><p>The twenty first centry is definitely fertilizing my cyberpunk excentricities.</p></blockquote>




<blockquote><p>People ask me &#8220;have you moved to Belgrade? Is this permanent?&#8221; No, it&#8217;s not permament. Just that, some of my shoes are there, and a closet&#8230; I live out of my laptop now. That&#8217;s how I live. And so do increasing numbers of my collegues.</p></blockquote>




<blockquote><p>The twenty first centry is definitely fertilizing my cyberpunk excentricities.</p></blockquote>




<blockquote><p>It&#8217;s a world of diaspora and globalization. Gypsies and jetsetters. Refugees and tech pioneers. And the differences are that thin.</p></blockquote>




<blockquote><p>I no longer need to be a resident of any particular city. I don&#8217;t make any money in any foreign state. Nothing enters or leaves Belgrade except for ones and zeroes. That&#8217;s all. I never stay there long enough to become permanent. I don&#8217;t even DO permanent. National borders? They&#8217;re like speed bumps.</p></blockquote>


<p>This talk is well composed. It is shot through with diamond bullets of poetic insight. Sterling&#8217;s own voice and clearly communicated emotion turns this from a discursion on the quirks of Eastern Europe&#8217;s up and coming intelligentsia into a full-blown harangue on the nature of the world as we find it right now in 2013, from the view of someone looking ahead in 2006.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A mental steam shovel part two: the algorithm]]></title>
    <link href="http://archetyp.al/blog/2013/02/24/a-mental-steam-shovel-part-two-the-algorithm/"/>
    <updated>2013-02-24T22:56:00-06:00</updated>
    <id>http://archetyp.al/blog/2013/02/24/a-mental-steam-shovel-part-two-the-algorithm</id>
    <content type="html"><![CDATA[<p>In the <a href="http://archetyp.al/blog/2013/02/14/a-mental-steam-shovel/" title="A Mental Steam Shovel">first article</a> of this series, I introduced the four in a row game concept and linked to my code for an AI to play it. I will now set about explaining how I did this.</p>

<p>Algorithms make/help make an increasing number of decisions. How to get from <a href="http://en.wikipedia.org/wiki/Shortest_path_problem" title="shortest path">one place to another</a>, who to <a href="http://blog.ted.com/2013/02/13/a-look-at-okcupids-algorithm-getting-personal-with-ted-ed-for-valentines-day/" title="okcupid algorithm">go on a date</a> with, which <a href="http://en.wikipedia.org/wiki/Netflix_Prize" title="netflix">movie to watch</a> next, even the rapid on/off patterns of <a href="http://www.docstoc.com/docs/47562161/Fuzzy-Logic-and-Anti-Lock-Braking-Systems" title="anti-lock brakes">anti-lock brakes</a>.</p>

<!-- more -->


<h2>What is an algorithm?</h2>

<p>An algorithm is a series of instructions, which when done over some input, produces an output in a finite amount of time. This concept is the analog of physics in the example of a shovel. Applied physics tells us how much the force we apply  will be multiplied by using the leverage of the shovel. The application of an algorithm tells us how quickly we can convert inputs to outputs, and exactly which instructions to use. The speed or running time of an algorithm is often expressed in big O notation. This is a way of relating the number of instructions needed to produce an output in relation to the number of inputs, in the worst case scenario.</p>

<p>For example, O(n) is linear time. So the amount of calculation required should scale linearly with the number of inputs. Suppose we have a list of five unsorted numbers. We would like to know if the number 7 is in that list. One way to accomplish this task would be to check each number in the list, one by one, and see if it is equal to the number 7. If it is, we can stop and answer the question. If we get to the end of the list and have not found the number 7, then we know it is not in the list. So the time it takes to search for the presence of 7 is linearly related to the number of numbers in our list. When the number we are searching for is not in the list, we encounter the worst case for the linear search. If there is a 7 at the front of the list, we will know the answer in only one comparison. Big O notation gives the worst case running time. These measures of algorithm complexity can range from O(1), constant time, to O(n<sup>2),</sup> polynomial time, to O(n!), factorial time, and points beyond.</p>

<p>The time complexity of the linear search algorithm, O(n), tells us that if we want to search though a list of 100,000,000 numbers, the (worst case) time taken will be 100,000,000 times longer than if we had searched a list of a single number. However, if we wanted to do something more complicated with those lists of numbers, perhaps a complexity of O(n<sup>2),</sup> the 100,000,000 item list would take 10,000,000,000,000,000 times as long as if we did that same operation to a list of one. This is important for determining the applicability of the algorithm for use in actual projects. This is similar to the knowledge of how much force must be applied to a shovel with a specific leverage point to move something of a particular weight. When we scale the example up to a steam shovel, much more complexity is introduced, but the basic principles of leverage still apply. So it is with algorithms. Our linear search algorithm is simple compared to the algorithm used for the four in a row AI, but both are a series of instructions which will run for some time which is related to the number of inputs.</p>

<p><img class="center" src="http://archetyp.al/images/empty_board.png"></p>

<h2>Four in a Row AI</h2>

<p>It turns out that the artificial intelligence technique we will employ is a search as well. It is a search of the &#8220;state space&#8221; of the game. The state space is the total number of possible configurations of the game board. The case of connect four, the <a href="http://en.wikipedia.org/wiki/Game_complexity" title="connect four state space complexity">state space is 10<sup>13</sup></a>. That is, there are roughly 10<sup>13</sup> ways of placing the red and black pieces in the 42 slots. When the AI is deciding where to move, it will search this state space, starting from the current board configuration and making each move it could make (7 in the case of four in row), in order to find which move is best to make. So if the algorithm used brute force to exhaustively check every possible game state, it would take quite a long time to make any move, since it would have to calculate 10<sup>13</sup> moves each time. Limiting the search space will help to cut this down, at the cost of certainty.</p>

<p>Since there is (usually) not enough time to calculate the rest of the game after each move, something must be done. The first approach is to limit the depth of our search. That is, after each move, only search ahead some fixed number of moves, or <a href="http://en.wikipedia.org/wiki/Ply_(game_theory)" title="ply">ply</a>. One ply would be considering each option of where to place the very next piece, and no further. In the four in a row game, there are 7 possible moves.</p>

<p><img class="center" src="http://archetyp.al/images/one_ply_board.png"></p>

<p>Two ply would be considering all the options of where to place the next piece, and then each possible play from all of those possibilities. In this example, that leads to 49 game states to consider.</p>

<p><img class="center" src="http://archetyp.al/images/two_ply_board.png"></p>

<p>I have only pictured the full possibilities of a play at column four to illustrate the point.</p>

<h2>MiniMax Algorithm</h2>

<p>So what will we do once we create this tree of possible boards? Search them! We will be using the MiniMax algorithm. I used <a href="http://www.amazon.com/gp/product/059651624X/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=059651624X&amp;linkCode=as2&amp;tag=archetypal-20" title="Algorithms in a nutshell">Algorithms in a Nutshell from O&#8217;Reilly</a> as a reference when coding this, and you may also find it useful. Though there are <a href="http://en.wikipedia.org/wiki/Minimax" title="wikipedia MiniMax">many</a> <a href="https://www.cs.tcd.ie/Glenn.Strong/3d5/minimax-notes.pdf" title="tic-tac-toe minimax">alternatives</a>. Minimax needs a way to score each board in the search space. A board in which the AI wins is scored as positive infinity, a loss is negative infinity, and everything inbetween is scored at the discresion of the programmer. The better the intermediate scores, the better the AI will do with lower ply searches that are less likely to encounter winning boards.</p>

<p>Once each board in the search tree is populated and scored, then starting from the leaf nodes (the deepest board states), the min or max of the possible moves is selected. If the current ply represents the AI&#8217;s move, then the max is chosen. Otherwise, the min of the possible moves is chosen. This assumes that the opponent will act to minimize the AI&#8217;s score and models the opponent&#8217;s moves accordingly.</p>

<p><img class="center" src="http://archetyp.al/images/two_ply_board_choose.png"></p>

<p>The minimax algorithm gets run once each time it&#8217;s the AI&#8217;s turn. The current board state is the only input, and the AI&#8217;s move is the only output. The time complexity of this algorithm is O(b<sup>d),</sup> where b is the <a href="http://en.wikipedia.org/wiki/Branching_factor" title="branching factor">branching factor</a> and d is the depth, or ply.</p>

<h2>Conclusion</h2>

<p>It is easy to see how the AI can keep track of a far greater number of possible board states than a human opponent. And so, just as a shovel can be outclassed by a steam shovel, but both are governed by the same rules of physics, so a particular implementation of the AI on a particular machine can be outclassed by a better implementation on a superior machine. The smoother the design and the more computing power, the deeper the search can go.</p>

<p><img class="center" src="http://archetyp.al/images/Steamshovel_Hollywoodland.jpg"></p>

<p>The next installment in this series will outline the next steps for this algorithm&#8217;s birth into the physical world. Not long from now, this project will be completed and there will be a physical four in a row board upon which a person will be able to play against the AI.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A mental steam shovel]]></title>
    <link href="http://archetyp.al/blog/2013/02/14/a-mental-steam-shovel/"/>
    <updated>2013-02-14T23:41:00-06:00</updated>
    <id>http://archetyp.al/blog/2013/02/14/a-mental-steam-shovel</id>
    <content type="html"><![CDATA[<p>A month ago I was hanging out with my friend <a href="http://excid3.com" title="excid3.com">Chris</a>. We were having our weekly meetup, talking about our approach to our work, recent experiences, and just enjoying our <a href="http://www.thecivillifebrewingcompany.com/TheCivilLife/Welcome.html" title="civil life brewing company">surroundings</a>. I noticed a connect four game sitting in the corner, on a dark wooden ledge. The old, disjoint of additive and subtractive primary colors, blue and yellow plastic version of the game would have done the trick, but this was even better. It was a wooden version of the board. There were two wooden dowels, each half the width of the board, inserted just beneath the bottom row, which held the pieces in the board. When you draw them out, one from each side, the game is reset and the pieces fall to the bottom of the game board.</p>

<p>“I&#8217;m sure there&#8217;s some simple heuristics to this I&#8217;ve long since forgotten.”</p>

<!-- more -->


<p>“Yeah, I used to play this all the time.”</p>

<p>“What&#8217;s the quickest way to lose&#8230;? Oh right, allow the opponent to get three in a row on the bottom with an open slot to the right and left.”</p>

<p>And on and on we went. We played for almost an hour until we hit upon an improvement.</p>

<p>“Let&#8217;s enact the chess rules around checkmate. You have to call check, and you can&#8217;t move in a way that will cause you to lose the game on the next turn.”</p>

<p>“Right, so you can&#8217;t win by distracting someone, or because they didn&#8217;t see you stacking three pieces in a row, you have to win by building an inescapable trap, like check-mate.&#8221;</p>

<p>This new approach instantly changed our engagement with the game. We are probably not the first people to hit upon this strategy (a perfunctory search failed to falsify this notion), but we redoubled our interest in this simple game simply by adding a dimension to it, one which forced us into a different mode of thinking.</p>

<p>This experience got me thinking about games and AI. I had previously implemented an Othello AI for a class at <a href="http://www.cs.siue.edu/" title="cs.siue.edu">SIUE</a>, and had a wonderful time doing it. I spent a week, just tuning the various heuristics.  I improved it to the point that I could almost never beat it myself.</p>

<p>I saw what had to be done, and set about doing it. I began the implementation of a <a href="https://github.com/arrogantrobot/connect_four" title="connect four github repo">connect four AI</a>. I didn&#8217;t know exactly what form it would take, or if it would even be completed. I am enthralled by algorithms and their ability to leverage some bit of truth. A wrench allows its user to bring leverage to bear on a physical task, and so it is with algorithms and the domain of information. We are not shocked by the fact that a person can wring some elements from the earth and form them into a tool that is stronger and more durable than its maker. However, this is much more shocking when it happens with informational tools. My goal for the connect four AI was to build just such a tool.</p>

<p>This task is certainly not new territory. Connect four is a classic example for AI programming exercises everywhere. There&#8217;s even one from the precambrian era of interactive web development, <a href="http://www.pomakis.com/c4/online/c4.cgi" title="n in a row">implemented in cgi</a>. I set about this for the joy of seeing it done. What will follow is an account of my implementing the AI and the various projects that have followed from it.</p>

<p>If you are wondering where this is going, like all truly interesting projects in the 21st century, this one leads to <a href="https://github.com/arrogantrobot/connect_four" title="connect four github repo">Github</a>, the <a href="http://www.raspberrypi.org/" title="raspberry pi">Raspberry Pi</a>, being a maker, and composing elements of high complexity to form modules of even higher complexity. My next post will describe the above linked connect four algorithm in detail. Look for it soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Textruder]]></title>
    <link href="http://archetyp.al/blog/2012/12/02/textruder/"/>
    <updated>2012-12-02T20:04:00-06:00</updated>
    <id>http://archetyp.al/blog/2012/12/02/textruder</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/arrogantrobot/textruder" title="textruder github">Textruder</a> is the next installment in a long line of <a href="http://archetyp.al/cellular-automata-rule-explorer" title="cellular automata rule explorer">one-dimensional cellular automata implementations</a> on various platforms and various media. This adventure begins like so many, on the command line. The inspiration for this project came from reading one of <a href="http://www.stephenwolfram.com/publications/articles/ca/83-cellular/" title="wolfram 1983">Stephen Wolfram&#8217;s papers on cellular automata</a>. The original output of the programs testing the concepts of cellular automata was not graphical in the sense of directly mapping each cell to a pixel or block of pixels. Instead, they simply used the command line to emulate this behavior, printing out a new line for each iteration of the row of cells, with an &#8220;*&#8221; character representing the on cells and a space for the off cells.</p>

<!-- more -->


<p>So I set about making a command line version of the one-dimensional cellular automata. After using <a href="http://www.cmake.org/" title="cmake website">cmake</a> extensively for my day job, I found it to be an excellent tool for organizing C++ projects. So this project is built in cmake.</p>

<p>This project began simply as a command line cellular automaton and grew to become something a little bigger. It is now a program which will &#8220;extrude&#8221; any ascii printable text through the pattern of a one-dimensional cellular automaton. So instead of simply printing out a &#8220;*&#8221; character each time an &#8220;on&#8221; cell was encountered, I decided to print the next character of the specified source material. Textruder accepts both ascii text files and standard in.</p>

<p>This causes the source material to be extruded through the pattern of the cellular automaton. I have used the same method applied in my android live wallpaper <a href="https://play.google.com/store/apps/details?id=com.farawaylabs.android.emergentwallpaper" title="Emergent Wallpaper">Emergent Wallpaper</a> of randomly picking from a short list of interesting rules and allowing that rule to play out for a random interval before randomly selecting a rule from the list again and changing to it. This results in a continuous stream of non-repeating patterns without the need for human intervention. So the user of Textruder need only run the app and provide input, and the rest will happen automatically.</p>

<p>Navigate to <a href="http://archetyp.al/assets/textruder_demo.txt" title="textruder demo">this text file</a> to see a small example output text.</p>

<p>In order to run this yourself, you&#8217;ll need to build textruder. This requires that you have cmake.</p>

<figure class='code'><figcaption><span>Compile and run Textruder </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:arrogantrobot/textruder.git
</span><span class='line'>
</span><span class='line'>cd textruder
</span><span class='line'>
</span><span class='line'>cmake .
</span><span class='line'>
</span><span class='line'>make
</span><span class='line'>
</span><span class='line'>yes | ./textruder</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic Mechanical Self Reproduction]]></title>
    <link href="http://archetyp.al/blog/2012/09/09/automatic-mechanical-self-reproduction/"/>
    <updated>2012-09-09T22:54:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/09/09/automatic-mechanical-self-reproduction</id>
    <content type="html"><![CDATA[<p>While reading <a href="http://www.amazon.com/gp/product/0679743898/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0679743898&amp;linkCode=as2&amp;tag=archetypal-20" title="Artificial Life">Artificial Life: A Report From the Frontier Where Computers Meet Biology</a> by Steven Levy, I came across a reference to self-reproducing structures built by <a href="http://en.wikipedia.org/wiki/Lionel_Penrose" title="Lionel Penrose">Lionel</a> and <a href="http://en.wikipedia.org/wiki/Roger_Penrose" title="Roger Penrose">Roger Penrose</a>. These structures were small plywood cutouts fitted with various shapes and levers which allowed them to link up, or not, when coming into contact with another block of the same make. See the following two part short film about this project:</p>

<!-- more -->




<iframe src="http://player.vimeo.com/video/10297756" width="500" height="375" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p> <p><a href="http://vimeo.com/10297756">Automatic Mechanical Self Replication (part 1)</a> from <a href="http://vimeo.com/user2935790">chead</a> on <a href="http://vimeo.com">Vimeo</a>.</p></p>

<iframe src="http://player.vimeo.com/video/10298933" width="500" height="375" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p> <p><a href="http://vimeo.com/10298933">Automatic Mechanical Self Replication (part 2)</a> from <a href="http://vimeo.com/user2935790">chead</a> on <a href="http://vimeo.com">Vimeo</a>.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterated Prisoner's Dilemma]]></title>
    <link href="http://archetyp.al/blog/2012/08/19/iterated-prisoners-dilemma/"/>
    <updated>2012-08-19T17:55:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/08/19/iterated-prisoners-dilemma</id>
    <content type="html"><![CDATA[<p>I recently decided to re-read a book I had read long ago, in order that I might filter it through the knowledge and experience I&#8217;ve accrued since I first read it. It occurred to me that so much of what I have done in the intervening years has an impact on my understanding of it, that I could scarcely hold a conversation with my past self on the topic. The book in question is <a href="http://www.amazon.com/gp/product/B000SEHIG2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B000SEHIG2&amp;linkCode=as2&amp;tag=archetypal-20" title="The Selfish Gene, by Richard Dawkins">The Selfish Gene</a> by <a href="http://en.wikipedia.org/wiki/Richard_Dawkins" title="Richard Dawkins">Richard Dawkins</a>.</p>

<!-- more -->


<p>Dawkins&#8217; main point in the book is his thesis that species are not the salient unit of evolution, nor are individuals. The indivisible atomic unit of evolution, according to Dawkins, is the gene. The term &#8220;gene&#8221; has taken on a very specific technical meaning, that of a single stretch of DNA which can <a href="http://en.wikipedia.org/wiki/Transcription_(genetics)" title="transcription">transcribed</a> into <a href="http://en.wikipedia.org/wiki/Transcription_(genetics)" title="RNA">RNA</a>, then <a href="http://en.wikipedia.org/wiki/Translation_(biology)" title="translation">translated</a> into a protein. However, Dawkins explains that his intent is to refer to the minimum stretch of DNA required to encode a <a href="http://en.wikipedia.org/wiki/Phenotype" title="phenotype">phenotype</a>. One of the consequences of Dawkins&#8217; view on the topic of evolution is that the biological units we think of as individuals, i.e. a specific instance of a species, are actually vehicles manifested by genes in order to further replicate themselves.</p>

<p>Upon initial inspection, this idea seems obvious. This sense of &#8220;obviousness&#8221; is how to detect a remarkably good idea. While it may seem obvious, there must have been some individual to point it out to everyone else first, and this case, it was Dawkins. The best analogy I can make is that of Darwinian Evolution. It seems so painfully obvious, yet it took tens of thousands of years, so far as we know, for humans to produce this idea.</p>

<p>Indeed, as I read The Selfish Gene once more, I found myself totally engrossed in it. Each chapter is well constructed as an efficient implement to ram home the message of its author. One chapter in particular caught my attention this time around: &#8220;Nice Guys Finish First&#8221;. This is the chapter in which some of the game-theoretic ideas behind the Selfish Gene theory are elucidated via the example of <a href="http://en.wikipedia.org/wiki/Prisoner%27s_dilemma#The_iterated_prisoners.27_dilemma" title="Iterated Prisoner's Dilemma">Iterated Prisoner&#8217;s Dilemma</a>.</p>

<p>The singleton version, simply Prisoner&#8217;s Dilemma, is a <a href="http://en.wikipedia.org/wiki/Symmetric_game#Symmetry_in_2x2_games" title="2x2 games">2x2 game</a>, where there are only two players, with each player simultaneously playing one of two strategies. In this case, the two available strategies are cooperation and defection. If both players cooperate, they both receive a reward, 3 points. If one player chooses cooperation and one chooses defection, the cooperator receives zero points and the defector receives 5 points. If both defect, both players receive 1 point. So in the singleton version of the game, the rational actor with always choose defection. However, if the game is played multiple times between the same two players, a channel of communication is opened which can allow coordination, along with deception. If both players cooperate, the highest total points will be generated, as <em>3 + 3 > 5 + 0</em>.</p>

<p>The discussion of the various strategies goes on at length in <a href="http://www.amazon.com/gp/product/B000SEHIG2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B000SEHIG2&amp;linkCode=as2&amp;tag=archetypal-20" title="The Selfish Gene, by Richard Dawkins">The Selfish Gene</a>, and is recapped somewhat in a very interesting <a href="http://www.radiolab.org/blogs/radiolab-blogland/2010/dec/14/prisoners-dilemma/" title="radiolab">episode of Radiolab</a>. I was inspired by the discussion to implement my own instance of <a href="https://github.com/arrogantrobot/iterated-prisoners-dilemma" title="ipd">iterated prisoner&#8217;s dilemma in java</a>.</p>

<p>I am still in the early phases of this development. I have roughed in the classes for players and made two example strategies. One is the &#8220;Random&#8221; strategy which simply flips a coin each time and goes with that. I also implemented a widely discussed strategy called &#8220;Tit for Tat&#8221; which starts out cooperating, but will mirror the other player&#8217;s last play after the first. So if two T.F.T players meet, they will sail through, cooperating the whole way. If you would like to add a strategy, please do so! Here is my Tit for Tat implementation:</p>

<figure class='code'><figcaption><span>Tit for Tat Strategy </span><a href='http://github.com/arrogantrobot/iterated-prisoners-dilemma/blob/master/iterated-prisoners-dilemma/src/main/java/com/farawaylabs/ipd/TitForTat.java'>TitForTat.java </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">farawaylabs</span><span class="o">.</span><span class="na">ipd</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">TitForTat</span> <span class="kd">extends</span> <span class="n">Player</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">lastPlay</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TitForTat</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">getPlay</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">lastPlay</span><span class="o">;}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">result</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">lastPlay</span> <span class="o">=</span> <span class="n">result</span><span class="o">;}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPlayerName</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">&quot;TitForTat&quot;</span><span class="o">;}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <em>getPlay()</em> method returns a boolean, with <em>true</em> being cooperation and <em>false</em> being defection. The <em>result()</em> method gets called after each round, feeding the other player&#8217;s choice back to the agent, just in case it needs to do something with this, as Tit for Tat does. The <em>getPlayerName()</em> returns a string naming the strategy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert your 23andme raw data into VCF format]]></title>
    <link href="http://archetyp.al/blog/2012/08/13/convert-your-23andme-raw-data-into-vcf-format/"/>
    <updated>2012-08-13T18:36:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/08/13/convert-your-23andme-raw-data-into-vcf-format</id>
    <content type="html"><![CDATA[<p>A week ago I received my results from <a href="http://www.23andme.com" title="23andme.com">23andme.com</a>. Aside from the obvious points of interest, health risks, heritage, neanderthal composition, etc., I was also interested in getting my own data in raw format. While 23andme does provide a way to download your &#8220;raw&#8221; data, they are not really providing raw data. One cannot access the image data from the microarray sequencer that they used. What they do provide is formatted as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># rsid  chromosome  position    genotype
</span><span class='line'>rs4477212   1   82154   TT
</span><span class='line'>rs3094315   1   752566  TC
</span><span class='line'>rs3131972   1   752721  AA
</span><span class='line'>rs12124819  1   776546  AC
</span><span class='line'>rs11240777  1   798959  GA
</span><span class='line'>rs6681049   1   800007  CC</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Rows that begin with a &#8216;#&#8217; are header rows, of which, there may be as many as you please. 23andme puts some data in here, like which reference the coordinates are based on. This is an interesting topic as the build being used has just recently changed from hg18 to hg19. If you downloaded your raw data before August 9, 2012, you have hg18, after, and you have hg19. However, someone forgot to update the header to reflect this, so it still reads &#8220;build36&#8221;.</p>

<p>The rsid column is a unique identifier for reference SNP identifier from <a href="http://www.ncbi.nlm.nih.gov/SNP/get_html.cgi?whichHtml=how_to_submit#REFSNP" title="dbSNP">dbSNP</a>. These identifiers were more useful before the completion of the human genome project, as there was no coordinate system capable of resolving the locations of these various SNP&#8217;s. Now it is possible to address them like you might address a house, with the State or City being analogous to the chromosome and the street address being analogous to the &#8220;position&#8221;. The position is the number of bases from the beginning of the chromosome that a SNP is located at.</p>

<p>The final column is the genotype at the listed address. There are two bases listed because humans have two copies of each chromosome.</p>

<h2>VCF Format</h2>

<p>So this leaves us with a list of addresses. This is well and good, but many bioinformatics applications use a different format, not all that different, called the <a href="http://www.1000genomes.org/wiki/Analysis/Variant%20Call%20Format/vcf-variant-call-format-version-41" title="VCF format">&#8220;Variant Call Format&#8221;</a>. Specifically, a tool for predicting the biological effects of mutations (bases different than the reference bases), uses the VCF format. It is <a href="http://snpeff.sourceforge.net/" title="snpEff">snpEff</a>, or SNP effect predictor.</p>

<p>In order to facilitate the use of the various and sundry tools that use the VCF format, I have made a tool for converting the 23andme raw format to VCF. It is the <a href="https://github.com/arrogantrobot/23andme2vcf" title="23andme2vcf converter">23andme2vcf converter</a>. In order to use it, follow these steps:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/arrogantrobot/23andme2vcf.git
</span><span class='line'>cd 23andme2vcf
</span><span class='line'>perl 23andme2vcf.pl /path/to/23andme/raw/data.zip /desired/path/to/output.vcf</span></code></pre></td></tr></table></div></figure>


<p>If you do not use git, you may download the tarball from <a href="https://github.com/arrogantrobot/23andme2vcf/tarball/master" title="23andme2vcf converter tarball">github</a>, unpack it, and run line 3 of the above commands.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cae.js: hand it a canvas and stand back]]></title>
    <link href="http://archetyp.al/blog/2012/07/16/cae-dot-js-hand-it-a-canvas-and-stand-back/"/>
    <updated>2012-07-16T20:49:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/07/16/cae-dot-js-hand-it-a-canvas-and-stand-back</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/arrogantrobot/cae.js" title="cae.js">cae.js project</a> is a distillation of the cellular automaton built into the earlier <a href="https://github.com/arrogantrobot/Cellular-Automata-Explorer" title="cellular automata explorer">cellular automata explorer</a> project. It is a self-contained <a href="http://www.webmonkey.com/2010/02/make_oop_classes_in_javascript/" title="functions all the way down">javascript class</a>. It can instantiated thusly:</p>

<p>First, include the cae.js source in your html:</p>

<figure class='code'><figcaption><span>include cae.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/javascripts/cae.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Then create an instance of cae:</p>

<figure class='code'><figcaption><span>create a new cae object and start it  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">my_cae</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">cae</span><span class="p">();</span>
</span><span class='line'><span class="nx">my_cae</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="s2">&quot;my_canvas&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">my_cae</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it. Just replace &#8220;my_canvas&#8221; with the id of the canvas you&#8217;d like cae to draw upon, and it will determine the proper width and height. There are a few more moving pieces to fiddle with if you like.</p>

<p>First, frames per second:</p>

<figure class='code'><figcaption><span>frames per second  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">my_cae</span><span class="p">.</span><span class="nx">setFramesPerSecond</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Depending upon your processor and browser, your outcome will vary greatly.</p>

<p>You can also set the number of pixels per cell:</p>

<figure class='code'><figcaption><span>pixels per cell  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">my_cae</span><span class="p">.</span><span class="nx">setPixelsPerCell</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The lower limit for pixels per cell is 1, with the upper limit being the min of the width and height of your canvas. Though one cell is going to make for a pretty boring display. Actually, now that I think of it, this would cause the cell to be its own neighbor&#8230;</p>

<p><canvas id="my_canvas" width="100" height="100"></canvas></p>

<script src="http://archetyp.al/javascripts/cae.js"></script>


<script type="text/javascript">
    my_cae = new cae();
    my_cae.setPixelsPerCell(100);
    my_cae.init("my_canvas");
    my_cae.draw();
</script>


<p>I admit, it&#8217;s not very exciting. I think I just invented the zero-dimensional cellular automata.</p>

<p>Now to something much more exciting:</p>

<p><canvas id="my_other_canvas" width="300" height="700"></canvas></p>

<script type="text/javascript">
    my_other_cae = new cae();
    my_other_cae.setPixelsPerCell(5);
    my_other_cae.init("my_other_canvas");
    my_other_cae.draw();
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress CoderWall Aside]]></title>
    <link href="http://archetyp.al/blog/2012/07/08/octopress-coderwall-aside/"/>
    <updated>2012-07-08T22:22:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/07/08/octopress-coderwall-aside</id>
    <content type="html"><![CDATA[<p>While attempting to embed the coderwall badges via the <a href="http://coderwall.com/api#blogbadge" title="coderwall badges">provided coderwall includes</a>, I found that the default coderwall css/javascript was not playing nicely with octopress. So, to the internets! There I found a nice post on this very topic, from the <a href="http://kagekirin.github.com/blog/2012/02/22/playing-with-octopress-custom-asides/" title="Code Alchemist">Code Alchemist</a> blog. He rolled his own solution, which even includes an &#8220;endorse&#8221; button. Not bad. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archetypical Post]]></title>
    <link href="http://archetyp.al/blog/2012/07/08/archetypical-post/"/>
    <updated>2012-07-08T13:04:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/07/08/archetypical-post</id>
    <content type="html"><![CDATA[<p>Picture a tree. Let&#8217;s make it an <a href="http://en.wikipedia.org/wiki/Oak" title="Oak tree">oak tree</a>, so most people in the northern hemisphere will have direct access to one. Over the course of the oak tree&#8217;s life, it increases in size gradually, with new branches, sub-branches, and leaves appearing in that order of frequency. The trunk remains alive, but is less dynamic in it&#8217;s size and shape than the portions of the tree closer to the <a href="http://en.wikipedia.org/wiki/Tree_(data_structure)" title="Tree_(data_structure)">leaf-nodes</a>, to borrow a metaphor that seems dangerously recursive. New branches and leaves appear and disappear, each with a frequency entirely contained by the structure supporting it on the tree. All of the leaves growing from a specific branch will be around no longer than the branch itself is around. So it is with the branch as well. If our example branch is attached to another larger branch, it will be part of the tree no longer than the larger branch is.</p>

<p>The tree is a familiar <a href="http://en.wikipedia.org/wiki/Archetype" title="archetype">archetype</a>. One can find similar instances of this archetype in other systems, from the <a href="http://en.wikipedia.org/wiki/Tree_of_life_(biology)" title="tree of life">pattern of evolution</a> to <a href="http://en.wikipedia.org/wiki/Binary_tree" title="binary tree">data structures</a> in computer science. There is some utility in finding these archetypes and understanding them. We may find new insights into how to think about evolution, data storage, etc., by mining pre-existing sources of knowledge on similar systems. There is some risk associated with this behavior as well. It is always tempting to over-fit the metaphor and see <a href="http://en.wikipedia.org/wiki/Homology_(biology)" title="homology">homology</a> where there is no functional similarity.</p>

<p>I intend to use this site as a place to contain my thoughts on such matters, as well as a repository for my various projects. I will post on aspects of my projects that may illustrate the archetypes involved in software development and the design and implementation of systems in general. A primary source of inspiration for this site, including the title, is the book <a href="http://www.amazon.com/gp/product/0195019199/ref=as_li_ss_tl?ie=UTF8&amp;tag=archetypal-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0195019199" title="pattern language">A Pattern Language: Towns, Buildings, Construction</a> by Christopher Alexander.</p>
]]></content>
  </entry>
  
</feed>
