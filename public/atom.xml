<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Archetypal]]></title>
  <link href="http://archetyp.al/atom.xml" rel="self"/>
  <link href="http://archetyp.al/"/>
  <updated>2014-09-14T17:05:33-05:00</updated>
  <id>http://archetyp.al/</id>
  <author>
    <name><![CDATA[Rob Long]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BioWordCount: An Intro To Bioinformatics on Apache Spark]]></title>
    <link href="http://archetyp.al/blog/2014/09/07/biowordcount-ad-hoc-bioinformatics-on-apache-spark/"/>
    <updated>2014-09-07T18:48:00-05:00</updated>
    <id>http://archetyp.al/blog/2014/09/07/biowordcount-ad-hoc-bioinformatics-on-apache-spark</id>
    <content type="html"><![CDATA[<p>Previously on <a href="http://archetyp.al" title="archetyp.al homepage">archetyp.al</a>, I demonstrated a <a href="http://archetyp.al/blog/2014/05/05/biowordcount-a-brief-introduction-to-hadoop-for-the-bioinformatics-practicioner/" title="previous archetyp.al post on hadoop mapreduce">bioinformatics use for Hadoop MapReduce</a>. The idea was to build on the ubiquitous word count example, but using a problem which is at least somewhat relevant to bioinformatics. So I read in a VCF file and parsed out the reference and the variant bases, and collected an overall count of the mutation spectrum. So here we are, back at it with an <a href="http://spark.apache.org/" title="Apache Spark Homepage">Apache Spark</a> version of the demo.</p>

<p>Why Spark? There are a lot of reasons to go with Spark instead of MapReduce, but for me the most convincing reason is time. In this case the MapReduce solution written in Java takes north of 100 lines of code to set up. Granted, some of that is taken up parsing VCF lines for details which go unused, but 100 is a fair count. Now have a look at the Spark solution:</p>

<figure class='code'><figcaption><span>BioWordCountSpark.scala</span><a href='https://github.com/plantimals/BioWordCountSpark/blob/master/src/main/scala/al/archetyp/biowordcount/BioWordCountSpark.scala'>link to github</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.apache.spark.SparkContext</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.apache.spark.SparkContext._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.apache.spark.SparkConf</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">BioWordCountSpark</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span><span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">]){</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">sc</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">SparkContext</span><span class="o">(</span><span class="k">new</span> <span class="nc">SparkConf</span><span class="o">().</span><span class="n">setAppName</span><span class="o">(</span><span class="s">&quot;BioWordCount-Spark&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">file</span> <span class="k">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">textFile</span><span class="o">(</span><span class="n">args</span><span class="o">(</span><span class="mi">0</span><span class="o">))</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">rows</span> <span class="k">=</span> <span class="n">file</span><span class="o">.</span><span class="n">filter</span><span class="o">(!</span><span class="k">_</span><span class="o">.</span><span class="n">startsWith</span><span class="o">(</span><span class="s">&quot;#&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">refVar</span> <span class="k">=</span> <span class="n">rows</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot;\t&quot;</span><span class="o">).</span><span class="n">drop</span><span class="o">(</span><span class="mi">3</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">2</span><span class="o">))</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">refVarNoIndel</span> <span class="k">=</span> <span class="n">refVar</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">refvar</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">refvar</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">refvar</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">))</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">answer</span> <span class="k">=</span> <span class="n">refVarNoIndel</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">data</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">data</span><span class="o">(</span><span class="mi">0</span><span class="o">)+</span><span class="s">&quot; -&gt; &quot;</span><span class="o">+</span><span class="n">data</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">)).</span><span class="n">reduceByKey</span><span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'>    <span class="n">answer</span><span class="o">.</span><span class="n">sortByKey</span><span class="o">().</span><span class="n">saveAsTextFile</span><span class="o">(</span><span class="s">&quot;answer&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What is this code doing? If you are familiar with Scala, it accomplishes what it looks like it&#8217;s doing, but via different means. Start out defining a singleton object which contains the main function to be invoked upon execution. The <code>SparkContext</code> object is used to set up the Spark job. Then the input file is loaded from the first command line parameter, <code>arg(0)</code>. All header lines, those which begin with a &#8216;#&#8217; are filtered.</p>

<p>The <code>refVar = ...</code> line is where I drop the first three columns and take only the next 2 columns, which are the &#8220;reference&#8221; and &#8220;variant&#8221; columns, respectively. I feel like there&#8217;s a better way to select arbitrary columns to keep than the take/drop combination. If you have a suggestion, please leave a comment. Then the collection of ref and variant columns is filtered for length == 1, because we want to remove any indels or structural variants.</p>

<p>Line 12 is really where the magic happens. This is the step that is explicitly a MapReduce operation. The map function is provided a <a href="http://docs.scala-lang.org/tutorials/tour/anonymous-function-syntax.html" title="lambdas or anonymous functions">lambda (or anonymous function)</a>, which is run on each member of the <code>refVarNoIndel</code> collection. This lambda function simply concatenates the two columns, ref and var, into a single string &#8220;ref -> var&#8221; and then constructs a tuple with that string as the first value, and the number 1 as the second value.</p>

<p>Then, following immediately after the map operation, and on the same line no less, is the <code>reduceByKey</code> function. For those unfamiliar with Scala, the odd looking lambda, <code>(_ + _)</code> is shorthand for <code>(a, b =&gt; (a + b))</code>. This defines how the reduce function combines the values it receives from the map function, it adds each data point to a running total by key, and returns a list of those keys and their respective totals.</p>

<p>Line 13 then sorts the results and pushes them out to the <code>./answer</code> directory.</p>

<p>And that&#8217;s pretty much everything. There&#8217;s a an sbt file, which I lifted straight from the <a href="http://spark.apache.org/docs/latest/quick-start.html#standalone-applications" title="spark standalone apps">spark wordcount example</a>. In fact, this whole demo is really an adaptation of the afore mentioned Spark demo, with a slightly different example problem.</p>

<p>In order to set this all up, create a folder to work in. Create a file named <code>build.sbt</code> in the root of your project and paste in the sbt outline from the Spark wordcount example:</p>

<figure class='code'><figcaption><span>build.sbt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">name</span> <span class="o">:=</span> <span class="s">&quot;BioWordCount-Spark&quot;</span>
</span><span class='line'><span class="n">version</span> <span class="o">:=</span> <span class="s">&quot;1.0&quot;</span>
</span><span class='line'><span class="n">scalaVersion</span> <span class="o">:=</span> <span class="s">&quot;2.10.4&quot;</span>
</span><span class='line'><span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="s">&quot;org.apache.spark&quot;</span> <span class="o">%%</span> <span class="s">&quot;spark-core&quot;</span> <span class="o">%</span> <span class="s">&quot;1.0.2&quot;</span>
</span><span class='line'><span class="n">resolvers</span> <span class="o">+=</span> <span class="s">&quot;Akka Repository&quot;</span> <span class="n">at</span> <span class="s">&quot;http://repo.akka.io/releases/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the sbt file out of the way, let&#8217;s create the proper spot for the source file <code>mkdir -p src/main/scala/al/archetyp/biowordcount</code>. The source file <code>BioWordCountSpark.scala</code> belongs in the biowordcount directory.</p>

<p>From the root directory of the project, run <code>sbt package</code>. You should see the source file get compiled, and a jar created under <code>./target</code>.</p>

<p>The application should now be compiled and packaged up for usage. Let&#8217;s look for a tasty VCF to crunch with our new Spark app. I went to <a href="http://www.1000genomes.org/" title="1000 genomes">1000genomes.org</a> and dug up a <a href="ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/release/20130502/ALL.chr22.phase3_shapeit2_mvncall_integrated_v4.20130502.genotypes.vcf.gz" title="1000 genomes VCF chr22 download">VCF containing only variants from human chromosome 22</a>, the shortest autosomal contig. Once unzipped, the file is 10GB, with over 1,000,000 lines. There are over 2000 samples in this VCF, which means each row has more than 2000 columns. I used the following spark-submit command to run the app on this VCF file:</p>

<figure class='code'><figcaption><span>spark-submit command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">time</span> /Users/rob/bin/spark/spark-1.0.2-bin-hadoop2/bin/spark-submit <span class="se">\</span>
</span><span class='line'>--class <span class="s2">&quot;BioWordCountSpark&quot;</span> <span class="se">\</span>
</span><span class='line'>--master <span class="nb">local</span><span class="o">[</span>4<span class="o">]</span> <span class="se">\</span>
</span><span class='line'>target/scala-2.10/biowordcount-spark_2.10-1.0.jar <span class="se">\</span>
</span><span class='line'>/Users/rob/Downloads/vcf/ALL.chr22.phase3_shapeit2_mvncall_integrated_v4.20130502.genotypes.vcf
</span></code></pre></td></tr></table></div></figure>


<p>Your paths will vary, especially the location of the spark-submit bin and the vcf file to be counted. The &#8220;master&#8221; portion of the command directs spark to run this app locally, using as many as 4 cores. If you have a cluster, perhaps on aws, the <code>--master</code> argument should be replaced with the url of the Spark master.</p>

<p>Here follows my resuling count for the 1000genomes VCF:</p>

<figure class='code'><figcaption><span>output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat ./answer/*
</span><span class='line'><span class="o">(</span>A -&gt; C,31555<span class="o">)</span>
</span><span class='line'><span class="o">(</span>A -&gt; G,119609<span class="o">)</span>
</span><span class='line'><span class="o">(</span>A -&gt; T,27133<span class="o">)</span>
</span><span class='line'><span class="o">(</span>C -&gt; A,46771<span class="o">)</span>
</span><span class='line'><span class="o">(</span>C -&gt; G,49737<span class="o">)</span>
</span><span class='line'><span class="o">(</span>C -&gt; T,253419<span class="o">)</span>
</span><span class='line'><span class="o">(</span>G -&gt; A,254137<span class="o">)</span>
</span><span class='line'><span class="o">(</span>G -&gt; C,49410<span class="o">)</span>
</span><span class='line'><span class="o">(</span>G -&gt; T,47227<span class="o">)</span>
</span><span class='line'><span class="o">(</span>T -&gt; A,26446<span class="o">)</span>
</span><span class='line'><span class="o">(</span>T -&gt; C,118881<span class="o">)</span>
</span><span class='line'><span class="o">(</span>T -&gt; G,31131<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When running the app locally on my 2014 Macbook Pro with four cores, it was able to complete within 1 minute and 1 second. The OSX kernel may have cached some of the data, as I did run this command several times, with slight improvements each time. However, for processing a 10GB file with 1 million rows, and over 2000 columns, 1 minute is pretty good. Just to see how this approach stacks up against a python script, I decided to solve the same problem in python. I know that the real benefit to Spark comes when you are running on a multinode cluster, but I was sufficiently impressed with this performance that I wanted to get an idea how long it would take for python to do something similar. Here&#8217;s my python solution:</p>

<figure class='code'><figcaption><span>biowordcount.py</span><a href='https://github.com/plantimals/BioWordCountSpark/blob/master/src/main/python/biowordcount.py'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fh</span><span class="p">:</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">fh</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;#&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="k">continue</span>
</span><span class='line'>    <span class="n">cols</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ref</span> <span class="o">=</span> <span class="n">cols</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="n">var</span> <span class="o">=</span> <span class="n">cols</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">ref</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">var</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>      <span class="n">key</span> <span class="o">=</span> <span class="s">&quot;{0} -&gt; {1}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ref</span><span class="p">,</span><span class="n">var</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">count</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="n">count</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">count</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">count</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;({0},{1})&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">count</span><span class="p">[</span><span class="n">k</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>When running the above python script on the same vcf, the running time was 1 minute and 40 seconds, reliably. So the speed up is not that amazing. I grabbed larger VCF, this time <a href="ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/release/20130502/ALL.chr1.phase3_shapeit2_mvncall_integrated_v4.20130502.genotypes.vcf.gz" title="100 genomes VCF chr1 download">chromosome 1 from 1000 genomes</a>, which is 61GB when unzipped. The Spark solution took 5 minutes and 50 seconds, while the python solution took 12 minutes and 5 seconds.</p>

<p>Not only is the Spark code faster to write (once you understand the basics), but it actually runs faster. Turn around times on test rus are reduced when the app itself runs faster. It is not unreasonable to assume that code which can be written so much faster and in so many fewer lines will be much easier to read and understand. The density of Scala allows the reader to see and understand larger swaths of the code with in the space of a glance. I&#8217;m lookging forward to exploring the Spark ecosystem further.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BioWordCount: A Brief Introduction to Hadoop For The Bioinformatics Practitioner]]></title>
    <link href="http://archetyp.al/blog/2014/05/05/biowordcount-a-brief-introduction-to-hadoop-for-the-bioinformatics-practicioner/"/>
    <updated>2014-05-05T22:09:00-05:00</updated>
    <id>http://archetyp.al/blog/2014/05/05/biowordcount-a-brief-introduction-to-hadoop-for-the-bioinformatics-practicioner</id>
    <content type="html"><![CDATA[<p>Many people who do bioinformatics (the field seems to have settled on &#8220;bioinformatician&#8221;, but I like &#8220;bioinformaticist&#8221; better) find themselves dealing with large data sets and long running processes, arranged in myriad pipelines. In our time, this inevitably demands distributed computing. Life innovated during the <a href="https://en.wikipedia.org/wiki/Cambrian_explosion" title="Cambrian Explosion">Cambrian explosion</a> by going from single cells to colonies of cells. Life found a way to distribute and parallelize its processes. In order for us to properly focus our analytical microscopes on life, we imitate life in this strategy and distribute our processes across multiple CPU&#8217;s.</p>

<p>There are many strategies for distributing computation across multiple cores, processors, or physical computers, but this writeup will only cover the solutions provided by the <a href="https://hadoop.apache.org/" title="Hadoop">Hadoop</a> ecosystem, as packaged by <a href="http://www.cloudera.com/content/cloudera/en/home.html" title="Cloudera">Cloudera</a>. It is the case that as it is widely used now, the Hadoop system of distributed computation and storage does not provide the best solution for long running computations that input or output little data. Even tasks which do use lots of data like sequence alignment, can resist parallelization such that the benefits of Hadoop are negated. Hadoop shines when inputs and or outputs are large in scale, but made of many independent records. Why is this?</p>

<p>Hadoop is a series of services, which when taken together, provide an environment for distributed computation. Each computer in a Hadoop cluster is referred to as a node. A Hadoop environment contains one or more nodes. The majority of the nodes in a multi-node cluster are known as &#8220;DataNodes&#8221;, which store the data and do most of the computation. There are usually at least &#8220;NameNodes&#8221;, which serve to maintain the state of the Hadoop distributed filesystem, but not the contents of any of the files on that filesystem, just the directory structure and the locations of the blocks that make up the files in it.</p>

<h2>The Hadoop Ecosystem</h2>

<p>HDFS is the conceptual core of Hadoop. This is the part that, once understood, can unlock one&#8217;s view of the whole picture. The key concept is that instead of pushing data to where computations are happening, the computation is pushed to where the data lives. A good example of this is <a href="http://www-03.ibm.com/systems/technicalcomputing/platformcomputing/products/lsf/" title="Platform LSF">Platform LSF</a> or <a href="https://en.wikipedia.org/wiki/Oracle_Grid_Engine" title="Sun Grid Engine">Sun Grid Engine</a>, where the state of the art is to have NFS mounts on your compute nodes, such that when a job lands on that node, it then fetches the required inputs over the network, then does computation on them. Hadoop inverts this order of things by breaking each file up into chunks, default chunk size is 64MB, and distributing these chunks to the DataNodes. The NameNodes track which DataNode has which chunk of which file.</p>

<p>In order to do some computation on those distributed chunks, the MapReduce paradigm enters the picture. When computation needs to be done on a particular file, the required executables (jar files in this case) are sent to those DataNodes hosting at least one chunk of the file. The results of these computations are then gathered in HDFS, and potentially grouped by some key value. This is why large files, containing millions of small, homogeneous records are best for this paradigm. Each chunk is processed, line by line, with the results being aggregated for the whole.</p>

<p>From these two components, HDFS and MapReduce, the other services can be inferred or constructed. There is a distributed column-store database called <a href="https://hbase.apache.org/" title="HBase">HBase</a>, there is a workflow manager called <a href="https://oozie.apache.org/" title="Oozie">Oozie</a>, there is an indexer/search service provided by <a href="https://cwiki.apache.org/confluence/display/solr/SolrCloud" title="SolrCloud">SolrCloud</a>.</p>

<p>It is doubtful that any bioinformatics shop will entirely rely on Hadoop for all its distributed computing needs. It&#8217;s more and more plausible every day, with projects like <a href="http://bowtie-bio.sourceforge.net/crossbow/index.shtml" title="Crossbow">Crossbow, for bowtie alignment</a> and <a href="http://sourceforge.net/apps/mediawiki/contrail-bio/index.php?title=Contrail" title="Contrail">Contrail for assembly</a>. But in order to really learn how Hadoop works, I suggest an example problem.</p>

<p>I have selected the problem of calculating the mutational spectrum, as it is trivial to understand the mechanics of, is somewhat biologically relevant, and mimics exactly the flow of the classic <a href="https://hadoop.apache.org/docs/r1.2.1/mapred_tutorial.html" title="WordCount tutorial">Word Count MapReduce example</a>.</p>

<p>In short, <a href="https://en.wikipedia.org/wiki/Mutation_rate#Mutational_spectrum" title="Mutational Spectrum">mutational spectrum</a> is rate at which different types of mutations occur. Transitions are changes from a pyramidine base to another pyramidine, or a purine to another purine. A transversion is the substitution of a purine for a pyramidine, or vice versa.</p>

<p>My goal will be to generate a list of mutations, <code>A -&gt; C</code>, <code>A -&gt; G</code>, etc, with the associated number of occurences in a VCF file. The result will be several lines of text output.</p>

<h2>BioWordCount: The MapReduce Job</h2>

<p>The task of parsing each line of the VCF will be accomplished by a mapreduce job, which will be fed from an input in HDFS, and output an answer to HDFS as well. Begin by creating an empty maven project. There is an excellent tutorial on <a href="http://blog.cloudera.com/blog/2012/08/developing-cdh-applications-with-maven-and-eclipse/" title="maven tutorial">how to generate an empty maven project with the hadoop libraries at Cloudera&#8217;s website</a>. Follow this, and you will end up with a project ready for our java files. Begin in the <code>src/main/java/al/archetyp/biowordcount</code> directory, replacing the archetyp.al namespace for one of your choosing (preferably the one you used when creating your project).</p>

<p>The first class we create will be the BioWordCount class, which will hold both our mapper and reducer class. For a project of any size, the practice of putting the mapper and reducer in the same class that contains our Main, would be unwise. However, my goal with this demo is to push the complexity down low enough that one can concentrate purely on what mapreduce is and how one might use it.</p>

<p>The mapper class will look like this:</p>

<figure class='code'><figcaption><span>BioWordCount</span><a href='https://github.com/plantimals/biowordcount/blob/master/src/main/java/al/archetyp/biowordcount/BioWordCount.java'>link to github</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Map</span> <span class="kd">extends</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">LongWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">IntWritable</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Text</span> <span class="n">word</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Text</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">map</span><span class="o">(</span><span class="n">LongWritable</span> <span class="n">key</span><span class="o">,</span> <span class="n">Text</span> <span class="n">value</span><span class="o">,</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;#&quot;</span><span class="o">))</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="n">VcfLine</span> <span class="n">vcfLine</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VcfLine</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">titv</span> <span class="o">:</span> <span class="n">vcfLine</span><span class="o">.</span><span class="na">getTiTv</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">word</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">titv</span><span class="o">);</span>
</span><span class='line'>            <span class="n">context</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">one</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The four type parameters to the Mapper class that we extend are important. The first type, LongWritable, describes the type of the input key, in this case it will be an offset into the file, a line number. The second type is the value of the input. Text is a Hadoop specific type for passing around lines of text from a file. The next two types are the key and value types of the output of the mapper. For the purposes of the biowordcount app, the text  key will be something like &#8220;A -> C&#8221; and the value, the IntWritable, will always be one, as each line that is processed will only yield a single transition or transversion.</p>

<p>Very simply, for each line of our input file, in this case <a href="http://www.1000genomes.org/wiki/Analysis/Variant%20Call%20Format/vcf-variant-call-format-version-41" title="VCF format">a VCF</a>, the <code>void map(...)</code> function above will be called. The magic of hadoop is that it doesn&#8217;t matter if that VCF is 100 lines long or 100 million lines long. This class will be distributed to each node where a portion of the file is stored and executed on the lines of the file contained therein.</p>

<p>Each line of the header is skipped by simply returning without writing something to the output context if the line received starts with <code>#</code>. Then we see a helper class I created for this project to contain the parsing of VCF lines. The relevant parts of the VcfLine class are:</p>

<figure class='code'><figcaption><span>VcfLine</span><a href='https://github.com/plantimals/biowordcount/blob/master/src/main/java/al/archetyp/biowordcount/VcfLine.java'>link to github</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">VcfLine</span><span class="o">(</span><span class="n">String</span> <span class="n">line</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StringTokenizer</span> <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">vcfFields</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">vcfFields</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">setChrom</span><span class="o">(</span><span class="n">vcfFields</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>    <span class="n">setPos</span><span class="o">(</span><span class="k">new</span> <span class="n">Long</span><span class="o">(</span><span class="n">vcfFields</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">)));</span>
</span><span class='line'>    <span class="n">setRef</span><span class="o">(</span><span class="n">vcfFields</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>
</span><span class='line'>    <span class="n">alts</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">vcfFields</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">4</span><span class="o">).</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">)));</span>
</span><span class='line'>    <span class="n">isIndel</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;INDEL&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getTiTv</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">isIndel</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">alt</span> <span class="o">:</span> <span class="n">getAlts</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">answer</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">getRef</span><span class="o">()+</span><span class="s">&quot; -&gt; &quot;</span><span class="o">+</span><span class="n">alt</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The constructor method pulls in a row from a VCF file and parses out each column so we can interrogate the variant in our mapper, finding which <a href="https://en.wikipedia.org/wiki/Transition_(genetics)" title="transition">transition</a> and or <a href="https://en.wikipedia.org/wiki/Transversion" title="transversion">transversion</a> to report. Returning to the Map class, each single nucleotide variation (SNV) is written to the context. This is where the magic happens. We are writing a key/value pair. In this example, the key is the mutation type, &#8220;A -> C&#8221; for example, and the value will be one. The value is meant to represent a count of the mutations enountered that match the value.</p>

<p>At this point, each SNV is represented as a key value pair in flight between the mapper and the reducer. The <code>void reduce()</code> method of the reducer class will receive a collection containing all those key/value pairs with identical keys. For the purpose of counting the number of like mutations, these collections will be iterated over and summed up, providing a total count of the number of each mutation type.</p>

<figure class='code'><figcaption><span>BioWordCount</span><a href='https://github.com/plantimals/biowordcount/blob/master/src/main/java/al/archetyp/biowordcount/BioWordCount.java'>link to github</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Reduce</span> <span class="kd">extends</span> <span class="n">Reducer</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">reduce</span><span class="o">(</span><span class="n">Text</span> <span class="n">key</span><span class="o">,</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">IntWritable</span><span class="o">&gt;</span> <span class="n">values</span><span class="o">,</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span>
</span><span class='line'>            <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">IntWritable</span> <span class="n">val</span> <span class="o">:</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sum</span> <span class="o">+=</span> <span class="n">val</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">context</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="n">sum</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last line of the <code>void reduce()</code> function is vital, this is where the aggregated results are written out to the output directory. In order to inspect the complete project with the setup code, the mapper and reduce, along with the VCF parser, <a href="https://github.com/plantimals/biowordcount" title="BioWordCount github">have a look at the github repo</a>.</p>

<h2>Compile and Run</h2>

<p>Once these components are all put together, go to the root of the project folder where the <code>pom.xml</code> file lives. From here, run the command <code>mvn install</code>. This will run for a little while, compiling your java into bytecode and packaging everything into a jar, which should land in the <code>target</code> subdirectory. This jar is what will need to be sent into the Cloudera VM in order to run the job.</p>

<h3>The Cloudera VM</h3>

<p>In order to encapsulate the complexity of installing the Hadoop components on your dev machine, grab the <a href="http://www.cloudera.com/content/support/en/downloads/download-components/download-products.html?productID=F6mO278Rvo&amp;version=2" title="Cloudera VM">Cloudera QuickStart Vm (CDH 4.6)</a>, and download it. I am using Virtual Box, but they also provide vmware and KVM versions of the virtual machine, if those suit your setup better. Cloudera also includes some parts of their own making, like Cloudera Manager, which similarly wraps the complexity of administering the services of hadoop. So all you have to do in order to start using these services, is download the vm and start it up. This step saves hours, if not days, of setup time.</p>

<p>Once you have downloaded the VM and started it, go dig around. It should start up with firefox open to a page that links you to Cloudera Manager. Go to CM and click on the &#8220;services&#8221; menu on the toolbar at the top, then select &#8220;all services&#8221;. It is possible to stop, start, and restart all the services here. For our purposes, you will need to start, in this order, zookeeper, hdfs, and mapreduce.</p>

<p>I chose to create a shared directory to transfer data and jars between the host system and the guest Cloudera VM. Once the VM is setup and the shared directory created and used, or the jar and vcf data have been scp&#8217;d into the guest machine, it is time to run the compiled jar. Once the jar and source data are on the VM, open a terminal or ssh into the VM. The first step to running this example will be to put the source data into HDFS, so that it will be available when the mapreduce job is executed. <code>hadoop fs -mkdir data</code> then <code>hadoop fs -put data/mydata.vcf</code> and <code>hadoop fs -mkdir output</code> should do the trick. Then execute the job by running the command:</p>

<figure class='code'><figcaption><span>BioWordCount</span><a href='https://github.com/plantimals/biowordcount/blob/master/src/main/java/al/archetyp/biowordcount/BioWordCount.java'>link to github</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">hadoop</span> <span class="n">jar</span> <span class="n">BioWordCount</span><span class="o">.</span><span class="na">jar</span> <span class="n">al</span><span class="o">.</span><span class="na">archetyp</span><span class="o">.</span><span class="na">biowordcount</span><span class="o">.</span><span class="na">BioWordCount</span> <span class="o">/</span><span class="n">user</span><span class="o">/</span><span class="n">cloudera</span><span class="o">/</span><span class="n">data</span><span class="o">/</span><span class="n">mydata</span><span class="o">.</span><span class="na">vcf</span> <span class="o">/</span><span class="n">user</span><span class="o">/</span><span class="n">cloudera</span><span class="o">/</span><span class="n">output</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, the jar is sent to those nodes that hold chunks of mydata.vcf. Those nodes then run the various compoenents of the mapreduce process and the final result is deposited in /user/cloudera/output. This can be accessed by the command <code>hadoop fs -cat /user/cloudera/output/part-r-00000</code>, which should produce similar results to those shown below.</p>

<p>Here&#8217;s what the results look like.</p>

<figure class='code'><figcaption><span>BioWordCount</span><a href='https://github.com/plantimals/biowordcount/blob/master/src/main/java/al/archetyp/biowordcount/BioWordCount.java'>link to github</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">A</span> <span class="o">-&gt;</span> <span class="o">.</span>   <span class="mi">78509</span>
</span><span class='line'><span class="n">A</span> <span class="o">-&gt;</span> <span class="n">C</span>    <span class="mi">14752</span>
</span><span class='line'><span class="n">A</span> <span class="o">-&gt;</span> <span class="n">G</span>    <span class="mi">62310</span>
</span><span class='line'><span class="n">A</span> <span class="o">-&gt;</span> <span class="n">T</span>    <span class="mi">610</span>
</span><span class='line'><span class="n">C</span> <span class="o">-&gt;</span> <span class="o">.</span>    <span class="mi">96966</span>
</span><span class='line'><span class="n">C</span> <span class="o">-&gt;</span> <span class="n">A</span>    <span class="mi">14675</span>
</span><span class='line'><span class="n">C</span> <span class="o">-&gt;</span> <span class="n">G</span>    <span class="mi">989</span>
</span><span class='line'><span class="n">C</span> <span class="o">-&gt;</span> <span class="n">T</span>    <span class="mi">62729</span>
</span><span class='line'><span class="n">G</span> <span class="o">-&gt;</span> <span class="o">.</span>    <span class="mi">96803</span>
</span><span class='line'><span class="n">G</span> <span class="o">-&gt;</span> <span class="n">A</span>    <span class="mi">63172</span>
</span><span class='line'><span class="n">G</span> <span class="o">-&gt;</span> <span class="n">C</span>    <span class="mi">795</span>
</span><span class='line'><span class="n">G</span> <span class="o">-&gt;</span> <span class="n">T</span>    <span class="mi">14519</span>
</span><span class='line'><span class="n">T</span> <span class="o">-&gt;</span> <span class="o">.</span>    <span class="mi">79135</span>
</span><span class='line'><span class="n">T</span> <span class="o">-&gt;</span> <span class="n">A</span>    <span class="mi">696</span>
</span><span class='line'><span class="n">T</span> <span class="o">-&gt;</span> <span class="n">C</span>    <span class="mi">62786</span>
</span><span class='line'><span class="n">T</span> <span class="o">-&gt;</span> <span class="n">G</span>    <span class="mi">14491</span>
</span><span class='line'><span class="n">a</span> <span class="o">-&gt;</span> <span class="o">.</span>    <span class="mi">33572</span>
</span><span class='line'><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">C</span>    <span class="mi">6954</span>
</span><span class='line'><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">G</span>    <span class="mi">29519</span>
</span><span class='line'><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">T</span>    <span class="mi">107</span>
</span><span class='line'><span class="n">c</span> <span class="o">-&gt;</span> <span class="o">.</span>    <span class="mi">38822</span>
</span><span class='line'><span class="n">c</span> <span class="o">-&gt;</span> <span class="n">A</span>    <span class="mi">6981</span>
</span><span class='line'><span class="n">c</span> <span class="o">-&gt;</span> <span class="n">G</span>    <span class="mi">172</span>
</span><span class='line'><span class="n">c</span> <span class="o">-&gt;</span> <span class="n">T</span>    <span class="mi">29764</span>
</span><span class='line'><span class="n">g</span> <span class="o">-&gt;</span> <span class="o">.</span>    <span class="mi">38282</span>
</span><span class='line'><span class="n">g</span> <span class="o">-&gt;</span> <span class="n">A</span>    <span class="mi">29399</span>
</span><span class='line'><span class="n">g</span> <span class="o">-&gt;</span> <span class="n">C</span>    <span class="mi">151</span>
</span><span class='line'><span class="n">g</span> <span class="o">-&gt;</span> <span class="n">T</span>    <span class="mi">7010</span>
</span><span class='line'><span class="n">t</span> <span class="o">-&gt;</span> <span class="o">.</span>    <span class="mi">33106</span>
</span><span class='line'><span class="n">t</span> <span class="o">-&gt;</span> <span class="n">A</span>    <span class="mi">113</span>
</span><span class='line'><span class="n">t</span> <span class="o">-&gt;</span> <span class="n">C</span>    <span class="mi">29760</span>
</span><span class='line'><span class="n">t</span> <span class="o">-&gt;</span> <span class="n">G</span>    <span class="mi">6951</span>
</span></code></pre></td></tr></table></div></figure>


<p>The sum total of sites is 954600, which matches exactly the number of non-header lines in the input VCF. While this does not prove the correctness of this approach, it certainly suggests that there are no gross errors where data is added or lost. It&#8217;s always a good idea to look for ways to check your thinking at each stage of the process. Disproving assumptions can be difficult, but is more likely to result in good work.</p>

<p>I decided to leave in those sites that did not contain variants, <code>X -&gt; .</code>, so that the information would be present in the results. Again, the right course of action always depends upon the context, but I do like to leave in as much data as possible as far into the process as possible, so that the user can decide if it is relevant or not. There are different records for cases where the reference was a capital letter and when the reference was lower case. This is also information I decided to leave in the results. A lowercase letter represents a reference of the genome which lies in the repeatmaker regions, or regions of low complexity.</p>

<p>I used my own data for this project, which was obtained from <a href="https://www.23andme.com/" title="23andme">23andme</a> in the raw format and then converted to VCF via the <a href="http://archetyp.al/blog/2012/08/13/convert-your-23andme-raw-data-into-vcf-format/" title="23andme2vcf archetyp.al">23andme2vcf conversion script described here</a>.</p>

<h2>Conclusion</h2>

<p>Do what thou wilt. As mentioned above, bioinformatics as a field is fairly young, and bioinformatics on Hadoop is even younger. The distributed, mapreduce paradigm is a valuable tool. It is not the only tool, but let&#8217;s not allow the fact that it doesn&#8217;t do everything get in the way of letting Hadoop do something, those things that it does well. With the development of more frameworks and tools for Bioinformatics on Hadoop, more adoption will be possible and it will grow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FDA, 23andme, and Innovation]]></title>
    <link href="http://archetyp.al/blog/2013/11/26/fda-23andme-and-innovation/"/>
    <updated>2013-11-26T09:21:00-06:00</updated>
    <id>http://archetyp.al/blog/2013/11/26/fda-23andme-and-innovation</id>
    <content type="html"><![CDATA[<p>I&#8217;m neither a doctor nor a lawyer, so consider my opinions appropriately. I began my career as a software developer at the <a href="http://genome.wustl.edu/" title="The Genome Institute">Genome Institute (TGI)</a> at Washington University in St.Louis. I didn&#8217;t set out to get into bioinformatics, it just happened that it was the most interesting problem to work on in <a href="http://www.articulateventures.com/articulate-blog/category/a-newcomers-view-of-st-louis-a-heroic-city" title="St.Louis">St.Louis</a> at the time I was getting my degree in computer science. So I set about learning the craft of software development and the field of bioinformatics at the same time.</p>

<p>As many before me have noticed, biology and computers are strangely similar at their most basic level. Both decompose into some basic operations that get repeated over and over, with important results emerging at higher orders from the basic operations. Computer processors can only do simplistic operations on a few pieces of data at a time. Add two numbers. Multiply two numbers. Compare two numbers. <a href="https://en.wikipedia.org/wiki/BLAST" title="BLAST Algorithm">Algorithms</a> of enormous complexity can be implemented as a series of much smaller operations. Such is the case with biology. DNA is transcribed into RNA, which gets translated into proteins, which interact with each other in a cascading series of <a href="https://en.wikipedia.org/wiki/Insulin_signal_transduction_pathway_and_regulation_of_blood_glucose" title="Insulin Pathway">pathways</a> that in the end results in the swarm of cells that is a human being.</p>

<p>So when I began working on the variant calling portion of the <a href="http://genome.wustl.edu/projects/category/cancer-genomics/" title="Cancer Genomics">cancer sequencing</a> pipeline at TGI, I started to see that not only are these two fields, computers and biology, deeply similar, but that they reinforce and supplement one another. Computers are to biology what the telescope was to astronomy. Both biology and astronomy existed before their defining technologies were invented, but neither would be nearly as valuable to mankind without their paradigm-shift enabling technologies.</p>

<p>I was intimately involved in the process of taking raw genomic data from a sequencing machine and shepherding it through the pipeline of steps required to produce some actionable output. In the case of cancer sequencing, the output is mostly studies on large aggregations of tumor samples to try and discover how varieties of cancer develop and spread. But sometimes the output is meant to used for clinical sequencing. This is the sequencing of <a href="http://www.forbes.com/sites/matthewherper/2011/12/16/christopher-hitchens-and-steve-jobs-mark-limits-of-dna-sequencing-technology/" title="Christopher Hitchens and Clinical Sequencing">one specific person</a> and their tumor, to determine if the drugs we already have are good candidates for treatment. I was up to my elbows in other people&#8217;s DNA. I saw the variants in their DNA that determine their health. It was like reading the source code for a human being. So naturally I became curious about my own DNA.</p>

<p>Enter <a href="https://www.23andme.com/" title="23andme">23andme</a>.</p>

<p>23andme provides a personal genome service that can determine which variants an individual has at one million pre-selected sites in the genome. All you need to do is spit in a tube and mail it to them. A few weeks later they let you know when the sequencing and analysis is done, and you get to revel in the information about your source code, just like people with access to big labs, like TGI. To be sure, this is not the same as whole genome re-sequencing, where each and every base of the entire individual is determined. That is a bit more costly, but getting cheaper every day. 23andme provides answers to specific questions like &#8220;do I have the <a href="http://www.cancer.gov/cancertopics/factsheet/Risk/BRCA" title="BRCA mutations">BRCA mutations</a> which make me much more susceptible to breast cancer?&#8221; The answers you get from 23andme are answers to well studied questions.</p>

<p>By this time, I had become more involved in the field of bioinformatics and ended up at a commercial bioinformatics software shop here in St.Louis, <a href="http://partek.com/" title="Partek Inc.">Partek Inc.</a> In order to fuel their employees&#8217; interest in genomics and spark their thinking on use cases, they paid for all of us to get sequenced by 23andme. So in the summer of 2012, we each received our results and marveled at the vast amount of detail. Each question answered by sequencing is backed up by a plethora of links to published journal articles describing the function and studies done on that particular variant.</p>

<p>Here is how 23andme describes the state of my genome with respect to the above mentioned BRCA mutations:</p>

<blockquote><p>No copies of the three early-onset breast and ovarian cancer mutations identifiable by 23andme. May still have a different mutation in BRCA1 or BRCA2.</p></blockquote>


<p>You have to be familiar with how genetics works in order to properly parse this statement.</p>

<p>Enter the <a href="http://www.fda.gov/ICECI/EnforcementActions/WarningLetters/2013/ucm376296.htm" title="FDA 23andme Letter">FDA</a>. The FDA has recently ordered 23andme to stop providing their service to consumers. One of the issues they cite, is providing BRCA data to consumers:</p>

<blockquote><p>For instance, if the BRCA-related risk assessment for breast or ovarian cancer reports a false positive, it could lead a patient to undergo prophylactic surgery, chemoprevention, intensive screening, or other morbidity-inducing actions, while a false negative could result in a failure to recognize an actual risk that may exist.</p><footer><strong>FDA Letter</strong> <cite><a href='http://www.fda.gov/ICECI/EnforcementActions/WarningLetters/2013/ucm376296.htm'>www.fda.gov/ICECI/2013/&hellip;</a></cite></footer></blockquote>


<p>This is an alarming point to raise. No one wants to needlessly cause &#8220;morbidity-inducing actions&#8221; or give a false sense of security. So let&#8217;s unpack both the false positive case and the false negative case.</p>

<p>A false positive would be asserting that the customer has a specific mutation, when they do not in fact have that mutation. What are the odds of this happening? I don&#8217;t have specific data on the 23andme lab, but similar technologies result in errors on the order of 2.5 calls in 100,000. This is indeed a small probability. This is in the neighborhood of flipping a coin and getting 16 heads in a row. It&#8217;s quite unlikely, but not unthinkable. So if you get 1,000,000 variant calls from 23andme, somewhere in the neighborhood of 25 will be incorrect. There is a much deeper error model built around sequencing and variant calling, but I will only glance off the surface for today&#8217;s purpose. The FDA is concerned that &#8220;morbidity-inducing actions&#8221;, like a mastectomy, could be undertaken based on faulty evidence. However, very few customers of 23andme are going to read their results, find a BRCA positive answer, and immediately perform a self-mastectomy. At some point, the medical establishment gets involved. There are orthogonal methods of validating the BRCA carrier status. 23andme is purely an informational service, meant to be the beginning of a conversation, not the last word.</p>

<p>The case of a false negative is on the same order of improbability as the false positive. The snag comes in the semantics of the question being answered. Does the patient have the previously identified, inherited mutations in the BRCA genes? This is like knowing a certain edition of a book has a typo in a specific word on a specific line. Science has identified several of these specific typos that are commonly inherited. 23andme tells you if you have these specific typos in your book of life. It&#8217;s also possible that you acquired a typo during your lifetime, in some other word in the BRCA chapter of your genome. Or even that you inherited a typo, but one that hasn&#8217;t been identified by science yet. These are answers that 23andme can&#8217;t give you. So while they can say you don&#8217;t have typo&#8217;s X,Y, or Z, they can&#8217;t state that you have no typos at all. 23andme even states this in the copy on their site &#8220;May still have a different mutation in BRCA1 or BRCA2.&#8221;</p>

<p>In effect, the FDA wishes to place some barrier, either themselves or some other apparatus of medical establishment, between your genome sequence and you. They call the service that 23andme provides a &#8220;medical device.&#8221; I don&#8217;t claim that the implications of consumer genome sequencing are clear or entirely knowable at this time. I do claim that if we step in with overreaching caution and control where it is not warranted, we risk destroying a nascent industry that is going to be one of the biggest most world-shaping technologies of the next 100 years. Companies that now enjoy the freedom to innovate with new products and technologies will be forced to move elsewhere or stop.</p>

<p>St.Louis is becoming an important center for life-sciences, with the Genome Institute, Monsanto, the <a href="http://www.danforthcenter.org/" title="Danforth Plant Science Center">Danforth Plant Science Center</a>, Partek, and even newer players like <a href="http://www.cofactorgenomics.com/index.php" title="Cofactor Genomics">Cofactor Genomics</a>. The path forward to the 21st century for these technologies does not go through slow, monolithic government bureaucracies. People free to act on their insights and recent innovations will build this industry elsewhere if we clamp down on it now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digital Ocean hosting: error 2002 can't connect with local server, and a solution]]></title>
    <link href="http://archetyp.al/blog/2013/03/21/bad-mysql-install-error-2002-cannot-connect-with-local-server/"/>
    <updated>2013-03-21T00:12:00-05:00</updated>
    <id>http://archetyp.al/blog/2013/03/21/bad-mysql-install-error-2002-cannot-connect-with-local-server</id>
    <content type="html"><![CDATA[<p>I have recently started using <a href="https://www.digitalocean.com/" title="Digital Ocean">Digital Ocean</a> for hosting. I was previously using the free <a href="http://www.heroku.com/" title="Heroku">Heroku</a> hosting, which I liked very much. The DNS was a bit tricky to set up, but once it got configured, it was smooth. I was able to get a one second load time for the archetyp.al index. It&#8217;s all static files, but I was still happy with Heroku, especially for free. However, I&#8217;ve been diving much deeper into web development lately, and I&#8217;ve decided I need a larger base of operations on the web, and Digital Ocean was at the top of my short list of candidates (along with dreamhost and linode). The SSD&#8217;s on every machine is what finally sold me.</p>

<p>I&#8217;ve been working on a rails project lately, and I need a dev machine on the cloud for testing purposes. So I found myself needing to set up a rails environment on my new Digital Ocean instance. I naturally went with my friend <a href="http://excid3.com/" title="excid3">chris&#8217;s</a> excellent blog on <a href="http://excid3.com/blog/setting-up-rails-on-ubuntu-12-10-quantal-quetzal-with-ruby-node-js-nginx-passenger-and-mysql-or-postgres/#.UUqZKXGGggR" title="excid3 on rails setup">setting up rails for Ubuntu 12.10 with NginX, etc</a>. I decided to go with MySQL instead of postgres.</p>

<!-- more -->


<h2>ERROR 2002 (HY000): Can&#8217;t connect to local MySQL server through socket &#8216;/var/run/mysqld/mysqld.sock&#8217;</h2>

<p>When I went through the steps outlined in Chris&#8217;s blog, I encountered a few snags, including an issue where I couldn&#8217;t compile Nginx with Passenger support because I didn&#8217;t have enough ram (I&#8217;ll write about this soon). I was able to finish after some tinkering. So when it came time to &#8216;rake db:migrate&#8217;, I pushed button and did NOT receive bacon:</p>

<figure class='code'><figcaption><span>ERROR 2002 (HY000) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[rob@mandelbrot ~ ] sudo mysql -u root -p
</span><span class='line'>ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock'</span></code></pre></td></tr></table></div></figure>


<p>Naturally, I went through the various steps one takes when cryptic error messages arise. I checked to see if the mysql process was running:</p>

<figure class='code'><figcaption><span>No MySQL process running </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ rob@mandelbrot ~ ] ps aux | grep mysql
</span><span class='line'>rob      11749  0.0  0.0   9388   884 pts/1    S+   00:40   0:00 grep --color=auto mysql</span></code></pre></td></tr></table></div></figure>


<p>Indeed, the process was not running. Right. So at least the basic problem is known now, the mysql-server process itself is not running. So what next? Well, let&#8217;s try to start it!</p>

<figure class='code'><figcaption><span>service restart failed.. </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ rob@mandelbrot ~ ] sudo service mysql start
</span><span class='line'>start: Job failed to start</span></code></pre></td></tr></table></div></figure>


<p>Again, no bacon. So I then attempted to re-install the mysql-server package.</p>

<figure class='code'><figcaption><span>purge mysql-servr package </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ rob@mandelbrot ~ ] sudo apt-get remove mysql-server --purge</span></code></pre></td></tr></table></div></figure>


<p>Again, negative in the bacon dimension. The same results from attempting to start the mysql service. Then finally, I came across the right answer on the <a href="http://askubuntu.com/a/213353" title="askubuntu">askubuntu</a> stack exchange site. After stumbling through many forum threads where the complete removal of mysql-server was never quite reached, askubutu came through:</p>

<figure class='code'><figcaption><span>completely remove mysql-server for real </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get purge mysql-server mysql-common
</span><span class='line'>sudo rm -rf /var/lib/mysql
</span><span class='line'>sudo apt-get clean
</span><span class='line'>sudo apt-get install mysql-server</span></code></pre></td></tr></table></div></figure>


<p>That finally did it. After going through the setup process again, I had a working database server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gypsies and Jet-setters: Bruce Sterling at 2006 SXSW]]></title>
    <link href="http://archetyp.al/blog/2013/03/06/gypsies-and-jet-setters-bruce-sterling-at-2006-sxsw/"/>
    <updated>2013-03-06T00:04:00-06:00</updated>
    <id>http://archetyp.al/blog/2013/03/06/gypsies-and-jet-setters-bruce-sterling-at-2006-sxsw</id>
    <content type="html"><![CDATA[<p>This is the first Bruce Sterling talk that I encountered. Now I&#8217;m an inveterate Sterlingite, but at the time, 2006, I had only barely crossed intellectual paths with Sterling. I downloaded it with some long dead, precambrian cousin of google reader that lived in the swamps and estuaries of windows computers and survived by allowing the user to view RSS feeds on his desktop. Then pushed it to my equally antediluvian, single purpose device, an Archos mp3 player. I listened to this talk many times before the Archos died off. I thought this audio was lost to the bit bucket of history, until one day&#8230; <a href="http://archive.org/" title="archive dot org">archive.org</a>. These people are the new Library of Alexandria, with podcasts instead of papyrus.</p>

<p><a href="http://archive.org/details/BruceSterlingSxswKeynoteSpeechTheStateOfTheWorld" title="Bruce Sterling Sxsw Keynote, 2006 at archive.org">The full mp3 is available here.</a></p>

<!-- more -->


<p>Here are some excerpts:</p>

<blockquote><p>Commons based peer production, as an industrial method, is getting it&#8217;s legs under it. This is something I complained about for years. I used to complain that GNU had the wrong name, because the recursive name for GNU is GNU&#8217;s Not Unix. And I describe that as rather childish, because you should not name yourself in opposition to something else, you should have your own name. It&#8217;s like, if GNU&#8217;s not Unix, what is it?</p><p>Well, it&#8217;s commons based peer production.</p></blockquote>




<blockquote><p>Flickr is not a copy of anything else. It is not a hippie knockoff of a commercial product. Wikipedia is not like anything else. A wiki is like nothing known to mankind. Collaborative web-filters are very spooky things; they are without historical precedent. Websites that throw their API&#8217;s open and turn themselves into platforms rather than sites&#8230; it is a little hard to explain the significance of that to everyday people who are not techies and programmers, but that is a major development. The net community is no longer hanging on the coat-tails of Gates. That monopolistic chokehold, that did so much to reduce innovation, and to introduce global criminality to hapless Windows users.</p></blockquote>




<blockquote><p>Only in the United States do dying phone companies lobby the government as if they were indian casinos.</p></blockquote>




<blockquote><p>As you may or may not know, I am spending a lot of my time in Europe, after spending a year in California. I get to see America from the outside now. I get to see America as 94% of the planet sees America. And I look at wireless spreading in London and the spread of broadband in Korea. I&#8217;ve got broadband in Serbia where the phone companies are literally run by criminals in exile. And my broadband in Serbia costs $20 a month. And it works.</p></blockquote>




<blockquote><p>It is decadent, it is sclerotic. It looks like the Soviet Union.</p><p>&#8230;they are turning the USA into a banana republic with rockets.</p><p>Not just politically backward, <em>technically</em> backward.</p></blockquote>




<blockquote><p>The twenty first centry is definitely fertilizing my cyberpunk excentricities.</p></blockquote>




<blockquote><p>People ask me &#8220;have you moved to Belgrade? Is this permanent?&#8221; No, it&#8217;s not permament. Just that, some of my shoes are there, and a closet&#8230; I live out of my laptop now. That&#8217;s how I live. And so do increasing numbers of my collegues.</p></blockquote>




<blockquote><p>The twenty first centry is definitely fertilizing my cyberpunk excentricities.</p></blockquote>




<blockquote><p>It&#8217;s a world of diaspora and globalization. Gypsies and jetsetters. Refugees and tech pioneers. And the differences are that thin.</p></blockquote>




<blockquote><p>I no longer need to be a resident of any particular city. I don&#8217;t make any money in any foreign state. Nothing enters or leaves Belgrade except for ones and zeroes. That&#8217;s all. I never stay there long enough to become permanent. I don&#8217;t even DO permanent. National borders? They&#8217;re like speed bumps.</p></blockquote>


<p>This talk is well composed. It is shot through with diamond bullets of poetic insight. Sterling&#8217;s own voice and clearly communicated emotion turns this from a discursion on the quirks of Eastern Europe&#8217;s up and coming intelligentsia into a full-blown harangue on the nature of the world as we find it right now in 2013, from the view of someone looking ahead in 2006.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A mental steam shovel part two: the algorithm]]></title>
    <link href="http://archetyp.al/blog/2013/02/24/a-mental-steam-shovel-part-two-the-algorithm/"/>
    <updated>2013-02-24T22:56:00-06:00</updated>
    <id>http://archetyp.al/blog/2013/02/24/a-mental-steam-shovel-part-two-the-algorithm</id>
    <content type="html"><![CDATA[<p>In the <a href="http://archetyp.al/blog/2013/02/14/a-mental-steam-shovel/" title="A Mental Steam Shovel">first article</a> of this series, I introduced the four in a row game concept and linked to my code for an AI to play it. I will now set about explaining how I did this.</p>

<p>Algorithms make/help make an increasing number of decisions. How to get from <a href="http://en.wikipedia.org/wiki/Shortest_path_problem" title="shortest path">one place to another</a>, who to <a href="http://blog.ted.com/2013/02/13/a-look-at-okcupids-algorithm-getting-personal-with-ted-ed-for-valentines-day/" title="okcupid algorithm">go on a date</a> with, which <a href="http://en.wikipedia.org/wiki/Netflix_Prize" title="netflix">movie to watch</a> next, even the rapid on/off patterns of <a href="http://www.docstoc.com/docs/47562161/Fuzzy-Logic-and-Anti-Lock-Braking-Systems" title="anti-lock brakes">anti-lock brakes</a>.</p>

<!-- more -->


<h2>What is an algorithm?</h2>

<p>An algorithm is a series of instructions, which when done over some input, produces an output in a finite amount of time. This concept is the analog of physics in the example of a shovel. Applied physics tells us how much the force we apply  will be multiplied by using the leverage of the shovel. The application of an algorithm tells us how quickly we can convert inputs to outputs, and exactly which instructions to use. The speed or running time of an algorithm is often expressed in big O notation. This is a way of relating the number of instructions needed to produce an output in relation to the number of inputs, in the worst case scenario.</p>

<p>For example, O(n) is linear time. So the amount of calculation required should scale linearly with the number of inputs. Suppose we have a list of five unsorted numbers. We would like to know if the number 7 is in that list. One way to accomplish this task would be to check each number in the list, one by one, and see if it is equal to the number 7. If it is, we can stop and answer the question. If we get to the end of the list and have not found the number 7, then we know it is not in the list. So the time it takes to search for the presence of 7 is linearly related to the number of numbers in our list. When the number we are searching for is not in the list, we encounter the worst case for the linear search. If there is a 7 at the front of the list, we will know the answer in only one comparison. Big O notation gives the worst case running time. These measures of algorithm complexity can range from O(1), constant time, to O(n<sup>2),</sup> polynomial time, to O(n!), factorial time, and points beyond.</p>

<p>The time complexity of the linear search algorithm, O(n), tells us that if we want to search though a list of 100,000,000 numbers, the (worst case) time taken will be 100,000,000 times longer than if we had searched a list of a single number. However, if we wanted to do something more complicated with those lists of numbers, perhaps a complexity of O(n<sup>2),</sup> the 100,000,000 item list would take 10,000,000,000,000,000 times as long as if we did that same operation to a list of one. This is important for determining the applicability of the algorithm for use in actual projects. This is similar to the knowledge of how much force must be applied to a shovel with a specific leverage point to move something of a particular weight. When we scale the example up to a steam shovel, much more complexity is introduced, but the basic principles of leverage still apply. So it is with algorithms. Our linear search algorithm is simple compared to the algorithm used for the four in a row AI, but both are a series of instructions which will run for some time which is related to the number of inputs.</p>

<p><img class="center" src="http://archetyp.al/images/empty_board.png"></p>

<h2>Four in a Row AI</h2>

<p>It turns out that the artificial intelligence technique we will employ is a search as well. It is a search of the &#8220;state space&#8221; of the game. The state space is the total number of possible configurations of the game board. The case of connect four, the <a href="http://en.wikipedia.org/wiki/Game_complexity" title="connect four state space complexity">state space is 10<sup>13</sup></a>. That is, there are roughly 10<sup>13</sup> ways of placing the red and black pieces in the 42 slots. When the AI is deciding where to move, it will search this state space, starting from the current board configuration and making each move it could make (7 in the case of four in row), in order to find which move is best to make. So if the algorithm used brute force to exhaustively check every possible game state, it would take quite a long time to make any move, since it would have to calculate 10<sup>13</sup> moves each time. Limiting the search space will help to cut this down, at the cost of certainty.</p>

<p>Since there is (usually) not enough time to calculate the rest of the game after each move, something must be done. The first approach is to limit the depth of our search. That is, after each move, only search ahead some fixed number of moves, or <a href="http://en.wikipedia.org/wiki/Ply_(game_theory)" title="ply">ply</a>. One ply would be considering each option of where to place the very next piece, and no further. In the four in a row game, there are 7 possible moves.</p>

<p><img class="center" src="http://archetyp.al/images/one_ply_board.png"></p>

<p>Two ply would be considering all the options of where to place the next piece, and then each possible play from all of those possibilities. In this example, that leads to 49 game states to consider.</p>

<p><img class="center" src="http://archetyp.al/images/two_ply_board.png"></p>

<p>I have only pictured the full possibilities of a play at column four to illustrate the point.</p>

<h2>MiniMax Algorithm</h2>

<p>So what will we do once we create this tree of possible boards? Search them! We will be using the MiniMax algorithm. I used <a href="http://www.amazon.com/gp/product/059651624X/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=059651624X&amp;linkCode=as2&amp;tag=archetypal-20" title="Algorithms in a nutshell">Algorithms in a Nutshell from O&#8217;Reilly</a> as a reference when coding this, and you may also find it useful. Though there are <a href="http://en.wikipedia.org/wiki/Minimax" title="wikipedia MiniMax">many</a> <a href="https://www.cs.tcd.ie/Glenn.Strong/3d5/minimax-notes.pdf" title="tic-tac-toe minimax">alternatives</a>. Minimax needs a way to score each board in the search space. A board in which the AI wins is scored as positive infinity, a loss is negative infinity, and everything inbetween is scored at the discresion of the programmer. The better the intermediate scores, the better the AI will do with lower ply searches that are less likely to encounter winning boards.</p>

<p>Once each board in the search tree is populated and scored, then starting from the leaf nodes (the deepest board states), the min or max of the possible moves is selected. If the current ply represents the AI&#8217;s move, then the max is chosen. Otherwise, the min of the possible moves is chosen. This assumes that the opponent will act to minimize the AI&#8217;s score and models the opponent&#8217;s moves accordingly.</p>

<p><img class="center" src="http://archetyp.al/images/two_ply_board_choose.png"></p>

<p>The minimax algorithm gets run once each time it&#8217;s the AI&#8217;s turn. The current board state is the only input, and the AI&#8217;s move is the only output. The time complexity of this algorithm is O(b<sup>d),</sup> where b is the <a href="http://en.wikipedia.org/wiki/Branching_factor" title="branching factor">branching factor</a> and d is the depth, or ply.</p>

<h2>Conclusion</h2>

<p>It is easy to see how the AI can keep track of a far greater number of possible board states than a human opponent. And so, just as a shovel can be outclassed by a steam shovel, but both are governed by the same rules of physics, so a particular implementation of the AI on a particular machine can be outclassed by a better implementation on a superior machine. The smoother the design and the more computing power, the deeper the search can go.</p>

<p><img class="center" src="http://archetyp.al/images/Steamshovel_Hollywoodland.jpg"></p>

<p>The next installment in this series will outline the next steps for this algorithm&#8217;s birth into the physical world. Not long from now, this project will be completed and there will be a physical four in a row board upon which a person will be able to play against the AI.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A mental steam shovel]]></title>
    <link href="http://archetyp.al/blog/2013/02/14/a-mental-steam-shovel/"/>
    <updated>2013-02-14T23:41:00-06:00</updated>
    <id>http://archetyp.al/blog/2013/02/14/a-mental-steam-shovel</id>
    <content type="html"><![CDATA[<p>A month ago I was hanging out with my friend <a href="http://excid3.com" title="excid3.com">Chris</a>. We were having our weekly meetup, talking about our approach to our work, recent experiences, and just enjoying our <a href="http://www.thecivillifebrewingcompany.com/TheCivilLife/Welcome.html" title="civil life brewing company">surroundings</a>. I noticed a connect four game sitting in the corner, on a dark wooden ledge. The old, disjoint of additive and subtractive primary colors, blue and yellow plastic version of the game would have done the trick, but this was even better. It was a wooden version of the board. There were two wooden dowels, each half the width of the board, inserted just beneath the bottom row, which held the pieces in the board. When you draw them out, one from each side, the game is reset and the pieces fall to the bottom of the game board.</p>

<p>“I&#8217;m sure there&#8217;s some simple heuristics to this I&#8217;ve long since forgotten.”</p>

<!-- more -->


<p>“Yeah, I used to play this all the time.”</p>

<p>“What&#8217;s the quickest way to lose&#8230;? Oh right, allow the opponent to get three in a row on the bottom with an open slot to the right and left.”</p>

<p>And on and on we went. We played for almost an hour until we hit upon an improvement.</p>

<p>“Let&#8217;s enact the chess rules around checkmate. You have to call check, and you can&#8217;t move in a way that will cause you to lose the game on the next turn.”</p>

<p>“Right, so you can&#8217;t win by distracting someone, or because they didn&#8217;t see you stacking three pieces in a row, you have to win by building an inescapable trap, like check-mate.&#8221;</p>

<p>This new approach instantly changed our engagement with the game. We are probably not the first people to hit upon this strategy (a perfunctory search failed to falsify this notion), but we redoubled our interest in this simple game simply by adding a dimension to it, one which forced us into a different mode of thinking.</p>

<p>This experience got me thinking about games and AI. I had previously implemented an Othello AI for a class at <a href="http://www.cs.siue.edu/" title="cs.siue.edu">SIUE</a>, and had a wonderful time doing it. I spent a week, just tuning the various heuristics.  I improved it to the point that I could almost never beat it myself.</p>

<p>I saw what had to be done, and set about doing it. I began the implementation of a <a href="https://github.com/arrogantrobot/connect_four" title="connect four github repo">connect four AI</a>. I didn&#8217;t know exactly what form it would take, or if it would even be completed. I am enthralled by algorithms and their ability to leverage some bit of truth. A wrench allows its user to bring leverage to bear on a physical task, and so it is with algorithms and the domain of information. We are not shocked by the fact that a person can wring some elements from the earth and form them into a tool that is stronger and more durable than its maker. However, this is much more shocking when it happens with informational tools. My goal for the connect four AI was to build just such a tool.</p>

<p>This task is certainly not new territory. Connect four is a classic example for AI programming exercises everywhere. There&#8217;s even one from the precambrian era of interactive web development, <a href="http://www.pomakis.com/c4/online/c4.cgi" title="n in a row">implemented in cgi</a>. I set about this for the joy of seeing it done. What will follow is an account of my implementing the AI and the various projects that have followed from it.</p>

<p>If you are wondering where this is going, like all truly interesting projects in the 21st century, this one leads to <a href="https://github.com/arrogantrobot/connect_four" title="connect four github repo">Github</a>, the <a href="http://www.raspberrypi.org/" title="raspberry pi">Raspberry Pi</a>, being a maker, and composing elements of high complexity to form modules of even higher complexity. My next post will describe the above linked connect four algorithm in detail. Look for it soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Textruder]]></title>
    <link href="http://archetyp.al/blog/2012/12/02/textruder/"/>
    <updated>2012-12-02T20:04:00-06:00</updated>
    <id>http://archetyp.al/blog/2012/12/02/textruder</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/arrogantrobot/textruder" title="textruder github">Textruder</a> is the next installment in a long line of <a href="http://archetyp.al/cellular-automata-rule-explorer" title="cellular automata rule explorer">one-dimensional cellular automata implementations</a> on various platforms and various media. This adventure begins like so many, on the command line. The inspiration for this project came from reading one of <a href="http://www.stephenwolfram.com/publications/articles/ca/83-cellular/" title="wolfram 1983">Stephen Wolfram&#8217;s papers on cellular automata</a>. The original output of the programs testing the concepts of cellular automata was not graphical in the sense of directly mapping each cell to a pixel or block of pixels. Instead, they simply used the command line to emulate this behavior, printing out a new line for each iteration of the row of cells, with an &#8220;*&#8221; character representing the on cells and a space for the off cells.</p>

<!-- more -->


<p>So I set about making a command line version of the one-dimensional cellular automata. After using <a href="http://www.cmake.org/" title="cmake website">cmake</a> extensively for my day job, I found it to be an excellent tool for organizing C++ projects. So this project is built in cmake.</p>

<p>This project began simply as a command line cellular automaton and grew to become something a little bigger. It is now a program which will &#8220;extrude&#8221; any ascii printable text through the pattern of a one-dimensional cellular automaton. So instead of simply printing out a &#8220;*&#8221; character each time an &#8220;on&#8221; cell was encountered, I decided to print the next character of the specified source material. Textruder accepts both ascii text files and standard in.</p>

<p>This causes the source material to be extruded through the pattern of the cellular automaton. I have used the same method applied in my android live wallpaper <a href="https://play.google.com/store/apps/details?id=com.farawaylabs.android.emergentwallpaper" title="Emergent Wallpaper">Emergent Wallpaper</a> of randomly picking from a short list of interesting rules and allowing that rule to play out for a random interval before randomly selecting a rule from the list again and changing to it. This results in a continuous stream of non-repeating patterns without the need for human intervention. So the user of Textruder need only run the app and provide input, and the rest will happen automatically.</p>

<p>Navigate to <a href="http://archetyp.al/assets/textruder_demo.txt" title="textruder demo">this text file</a> to see a small example output text.</p>

<p>In order to run this yourself, you&#8217;ll need to build textruder. This requires that you have cmake.</p>

<figure class='code'><figcaption><span>Compile and run Textruder </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:arrogantrobot/textruder.git
</span><span class='line'>
</span><span class='line'>cd textruder
</span><span class='line'>
</span><span class='line'>cmake .
</span><span class='line'>
</span><span class='line'>make
</span><span class='line'>
</span><span class='line'>yes | ./textruder</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic Mechanical Self Reproduction]]></title>
    <link href="http://archetyp.al/blog/2012/09/09/automatic-mechanical-self-reproduction/"/>
    <updated>2012-09-09T22:54:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/09/09/automatic-mechanical-self-reproduction</id>
    <content type="html"><![CDATA[<p>While reading <a href="http://www.amazon.com/gp/product/0679743898/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0679743898&amp;linkCode=as2&amp;tag=archetypal-20" title="Artificial Life">Artificial Life: A Report From the Frontier Where Computers Meet Biology</a> by Steven Levy, I came across a reference to self-reproducing structures built by <a href="http://en.wikipedia.org/wiki/Lionel_Penrose" title="Lionel Penrose">Lionel</a> and <a href="http://en.wikipedia.org/wiki/Roger_Penrose" title="Roger Penrose">Roger Penrose</a>. These structures were small plywood cutouts fitted with various shapes and levers which allowed them to link up, or not, when coming into contact with another block of the same make. See the following two part short film about this project:</p>

<!-- more -->




<iframe src="http://player.vimeo.com/video/10297756" width="500" height="375" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p> <p><a href="http://vimeo.com/10297756">Automatic Mechanical Self Replication (part 1)</a> from <a href="http://vimeo.com/user2935790">chead</a> on <a href="http://vimeo.com">Vimeo</a>.</p></p>

<iframe src="http://player.vimeo.com/video/10298933" width="500" height="375" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p> <p><a href="http://vimeo.com/10298933">Automatic Mechanical Self Replication (part 2)</a> from <a href="http://vimeo.com/user2935790">chead</a> on <a href="http://vimeo.com">Vimeo</a>.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterated Prisoner's Dilemma]]></title>
    <link href="http://archetyp.al/blog/2012/08/19/iterated-prisoners-dilemma/"/>
    <updated>2012-08-19T17:55:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/08/19/iterated-prisoners-dilemma</id>
    <content type="html"><![CDATA[<p>I recently decided to re-read a book I had read long ago, in order that I might filter it through the knowledge and experience I&#8217;ve accrued since I first read it. It occurred to me that so much of what I have done in the intervening years has an impact on my understanding of it, that I could scarcely hold a conversation with my past self on the topic. The book in question is <a href="http://www.amazon.com/gp/product/B000SEHIG2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B000SEHIG2&amp;linkCode=as2&amp;tag=archetypal-20" title="The Selfish Gene, by Richard Dawkins">The Selfish Gene</a> by <a href="http://en.wikipedia.org/wiki/Richard_Dawkins" title="Richard Dawkins">Richard Dawkins</a>.</p>

<!-- more -->


<p>Dawkins&#8217; main point in the book is his thesis that species are not the salient unit of evolution, nor are individuals. The indivisible atomic unit of evolution, according to Dawkins, is the gene. The term &#8220;gene&#8221; has taken on a very specific technical meaning, that of a single stretch of DNA which can <a href="http://en.wikipedia.org/wiki/Transcription_(genetics)" title="transcription">transcribed</a> into <a href="http://en.wikipedia.org/wiki/Transcription_(genetics)" title="RNA">RNA</a>, then <a href="http://en.wikipedia.org/wiki/Translation_(biology)" title="translation">translated</a> into a protein. However, Dawkins explains that his intent is to refer to the minimum stretch of DNA required to encode a <a href="http://en.wikipedia.org/wiki/Phenotype" title="phenotype">phenotype</a>. One of the consequences of Dawkins&#8217; view on the topic of evolution is that the biological units we think of as individuals, i.e. a specific instance of a species, are actually vehicles manifested by genes in order to further replicate themselves.</p>

<p>Upon initial inspection, this idea seems obvious. This sense of &#8220;obviousness&#8221; is how to detect a remarkably good idea. While it may seem obvious, there must have been some individual to point it out to everyone else first, and this case, it was Dawkins. The best analogy I can make is that of Darwinian Evolution. It seems so painfully obvious, yet it took tens of thousands of years, so far as we know, for humans to produce this idea.</p>

<p>Indeed, as I read The Selfish Gene once more, I found myself totally engrossed in it. Each chapter is well constructed as an efficient implement to ram home the message of its author. One chapter in particular caught my attention this time around: &#8220;Nice Guys Finish First&#8221;. This is the chapter in which some of the game-theoretic ideas behind the Selfish Gene theory are elucidated via the example of <a href="http://en.wikipedia.org/wiki/Prisoner%27s_dilemma#The_iterated_prisoners.27_dilemma" title="Iterated Prisoner's Dilemma">Iterated Prisoner&#8217;s Dilemma</a>.</p>

<p>The singleton version, simply Prisoner&#8217;s Dilemma, is a <a href="http://en.wikipedia.org/wiki/Symmetric_game#Symmetry_in_2x2_games" title="2x2 games">2x2 game</a>, where there are only two players, with each player simultaneously playing one of two strategies. In this case, the two available strategies are cooperation and defection. If both players cooperate, they both receive a reward, 3 points. If one player chooses cooperation and one chooses defection, the cooperator receives zero points and the defector receives 5 points. If both defect, both players receive 1 point. So in the singleton version of the game, the rational actor with always choose defection. However, if the game is played multiple times between the same two players, a channel of communication is opened which can allow coordination, along with deception. If both players cooperate, the highest total points will be generated, as <em>3 + 3 > 5 + 0</em>.</p>

<p>The discussion of the various strategies goes on at length in <a href="http://www.amazon.com/gp/product/B000SEHIG2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B000SEHIG2&amp;linkCode=as2&amp;tag=archetypal-20" title="The Selfish Gene, by Richard Dawkins">The Selfish Gene</a>, and is recapped somewhat in a very interesting <a href="http://www.radiolab.org/blogs/radiolab-blogland/2010/dec/14/prisoners-dilemma/" title="radiolab">episode of Radiolab</a>. I was inspired by the discussion to implement my own instance of <a href="https://github.com/arrogantrobot/iterated-prisoners-dilemma" title="ipd">iterated prisoner&#8217;s dilemma in java</a>.</p>

<p>I am still in the early phases of this development. I have roughed in the classes for players and made two example strategies. One is the &#8220;Random&#8221; strategy which simply flips a coin each time and goes with that. I also implemented a widely discussed strategy called &#8220;Tit for Tat&#8221; which starts out cooperating, but will mirror the other player&#8217;s last play after the first. So if two T.F.T players meet, they will sail through, cooperating the whole way. If you would like to add a strategy, please do so! Here is my Tit for Tat implementation:</p>

<figure class='code'><figcaption><span>Tit for Tat Strategy </span><a href='http://github.com/arrogantrobot/iterated-prisoners-dilemma/blob/master/iterated-prisoners-dilemma/src/main/java/com/farawaylabs/ipd/TitForTat.java'>TitForTat.java </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">farawaylabs</span><span class="o">.</span><span class="na">ipd</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">TitForTat</span> <span class="kd">extends</span> <span class="n">Player</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">lastPlay</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TitForTat</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">getPlay</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">lastPlay</span><span class="o">;}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">result</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">lastPlay</span> <span class="o">=</span> <span class="n">result</span><span class="o">;}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPlayerName</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">&quot;TitForTat&quot;</span><span class="o">;}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <em>getPlay()</em> method returns a boolean, with <em>true</em> being cooperation and <em>false</em> being defection. The <em>result()</em> method gets called after each round, feeding the other player&#8217;s choice back to the agent, just in case it needs to do something with this, as Tit for Tat does. The <em>getPlayerName()</em> returns a string naming the strategy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert your 23andme raw data into VCF format]]></title>
    <link href="http://archetyp.al/blog/2012/08/13/convert-your-23andme-raw-data-into-vcf-format/"/>
    <updated>2012-08-13T18:36:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/08/13/convert-your-23andme-raw-data-into-vcf-format</id>
    <content type="html"><![CDATA[<p>A week ago I received my results from <a href="http://www.23andme.com" title="23andme.com">23andme.com</a>. Aside from the obvious points of interest, health risks, heritage, neanderthal composition, etc., I was also interested in getting my own data in raw format. While 23andme does provide a way to download your &#8220;raw&#8221; data, they are not really providing raw data. One cannot access the image data from the microarray sequencer that they used. What they do provide is formatted as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># rsid  chromosome  position    genotype
</span><span class='line'>rs4477212   1   82154   TT
</span><span class='line'>rs3094315   1   752566  TC
</span><span class='line'>rs3131972   1   752721  AA
</span><span class='line'>rs12124819  1   776546  AC
</span><span class='line'>rs11240777  1   798959  GA
</span><span class='line'>rs6681049   1   800007  CC</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Rows that begin with a &#8216;#&#8217; are header rows, of which, there may be as many as you please. 23andme puts some data in here, like which reference the coordinates are based on. This is an interesting topic as the build being used has just recently changed from hg18 to hg19. If you downloaded your raw data before August 9, 2012, you have hg18, after, and you have hg19. However, someone forgot to update the header to reflect this, so it still reads &#8220;build36&#8221;.</p>

<p>The rsid column is a unique identifier for reference SNP identifier from <a href="http://www.ncbi.nlm.nih.gov/SNP/get_html.cgi?whichHtml=how_to_submit#REFSNP" title="dbSNP">dbSNP</a>. These identifiers were more useful before the completion of the human genome project, as there was no coordinate system capable of resolving the locations of these various SNP&#8217;s. Now it is possible to address them like you might address a house, with the State or City being analogous to the chromosome and the street address being analogous to the &#8220;position&#8221;. The position is the number of bases from the beginning of the chromosome that a SNP is located at.</p>

<p>The final column is the genotype at the listed address. There are two bases listed because humans have two copies of each chromosome.</p>

<h2>VCF Format</h2>

<p>So this leaves us with a list of addresses. This is well and good, but many bioinformatics applications use a different format, not all that different, called the <a href="http://www.1000genomes.org/wiki/Analysis/Variant%20Call%20Format/vcf-variant-call-format-version-41" title="VCF format">&#8220;Variant Call Format&#8221;</a>. Specifically, a tool for predicting the biological effects of mutations (bases different than the reference bases), uses the VCF format. It is <a href="http://snpeff.sourceforge.net/" title="snpEff">snpEff</a>, or SNP effect predictor.</p>

<p>In order to facilitate the use of the various and sundry tools that use the VCF format, I have made a tool for converting the 23andme raw format to VCF. It is the <a href="https://github.com/arrogantrobot/23andme2vcf" title="23andme2vcf converter">23andme2vcf converter</a>. In order to use it, follow these steps:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/arrogantrobot/23andme2vcf.git
</span><span class='line'>cd 23andme2vcf
</span><span class='line'>perl 23andme2vcf.pl /path/to/23andme/raw/data.zip /desired/path/to/output.vcf</span></code></pre></td></tr></table></div></figure>


<p>If you do not use git, you may download the tarball from <a href="https://github.com/arrogantrobot/23andme2vcf/tarball/master" title="23andme2vcf converter tarball">github</a>, unpack it, and run line 3 of the above commands.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cae.js: hand it a canvas and stand back]]></title>
    <link href="http://archetyp.al/blog/2012/07/16/cae-dot-js-hand-it-a-canvas-and-stand-back/"/>
    <updated>2012-07-16T20:49:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/07/16/cae-dot-js-hand-it-a-canvas-and-stand-back</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/arrogantrobot/cae.js" title="cae.js">cae.js project</a> is a distillation of the cellular automaton built into the earlier <a href="https://github.com/arrogantrobot/Cellular-Automata-Explorer" title="cellular automata explorer">cellular automata explorer</a> project. It is a self-contained <a href="http://www.webmonkey.com/2010/02/make_oop_classes_in_javascript/" title="functions all the way down">javascript class</a>. It can instantiated thusly:</p>

<p>First, include the cae.js source in your html:</p>

<figure class='code'><figcaption><span>include cae.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/javascripts/cae.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Then create an instance of cae:</p>

<figure class='code'><figcaption><span>create a new cae object and start it  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">my_cae</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">cae</span><span class="p">();</span>
</span><span class='line'><span class="nx">my_cae</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="s2">&quot;my_canvas&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">my_cae</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it. Just replace &#8220;my_canvas&#8221; with the id of the canvas you&#8217;d like cae to draw upon, and it will determine the proper width and height. There are a few more moving pieces to fiddle with if you like.</p>

<p>First, frames per second:</p>

<figure class='code'><figcaption><span>frames per second  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">my_cae</span><span class="p">.</span><span class="nx">setFramesPerSecond</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Depending upon your processor and browser, your outcome will vary greatly.</p>

<p>You can also set the number of pixels per cell:</p>

<figure class='code'><figcaption><span>pixels per cell  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">my_cae</span><span class="p">.</span><span class="nx">setPixelsPerCell</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The lower limit for pixels per cell is 1, with the upper limit being the min of the width and height of your canvas. Though one cell is going to make for a pretty boring display. Actually, now that I think of it, this would cause the cell to be its own neighbor&#8230;</p>

<p><canvas id="my_canvas" width="100" height="100"></canvas></p>

<script src="http://archetyp.al/javascripts/cae.js"></script>


<script type="text/javascript">
    my_cae = new cae();
    my_cae.setPixelsPerCell(100);
    my_cae.init("my_canvas");
    my_cae.draw();
</script>


<p>I admit, it&#8217;s not very exciting. I think I just invented the zero-dimensional cellular automata.</p>

<p>Now to something much more exciting:</p>

<p><canvas id="my_other_canvas" width="300" height="700"></canvas></p>

<script type="text/javascript">
    my_other_cae = new cae();
    my_other_cae.setPixelsPerCell(5);
    my_other_cae.init("my_other_canvas");
    my_other_cae.draw();
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress CoderWall Aside]]></title>
    <link href="http://archetyp.al/blog/2012/07/08/octopress-coderwall-aside/"/>
    <updated>2012-07-08T22:22:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/07/08/octopress-coderwall-aside</id>
    <content type="html"><![CDATA[<p>While attempting to embed the coderwall badges via the <a href="http://coderwall.com/api#blogbadge" title="coderwall badges">provided coderwall includes</a>, I found that the default coderwall css/javascript was not playing nicely with octopress. So, to the internets! There I found a nice post on this very topic, from the <a href="http://kagekirin.github.com/blog/2012/02/22/playing-with-octopress-custom-asides/" title="Code Alchemist">Code Alchemist</a> blog. He rolled his own solution, which even includes an &#8220;endorse&#8221; button. Not bad. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archetypical Post]]></title>
    <link href="http://archetyp.al/blog/2012/07/08/archetypical-post/"/>
    <updated>2012-07-08T13:04:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/07/08/archetypical-post</id>
    <content type="html"><![CDATA[<p>Picture a tree. Let&#8217;s make it an <a href="http://en.wikipedia.org/wiki/Oak" title="Oak tree">oak tree</a>, so most people in the northern hemisphere will have direct access to one. Over the course of the oak tree&#8217;s life, it increases in size gradually, with new branches, sub-branches, and leaves appearing in that order of frequency. The trunk remains alive, but is less dynamic in it&#8217;s size and shape than the portions of the tree closer to the <a href="http://en.wikipedia.org/wiki/Tree_(data_structure)" title="Tree_(data_structure)">leaf-nodes</a>, to borrow a metaphor that seems dangerously recursive. New branches and leaves appear and disappear, each with a frequency entirely contained by the structure supporting it on the tree. All of the leaves growing from a specific branch will be around no longer than the branch itself is around. So it is with the branch as well. If our example branch is attached to another larger branch, it will be part of the tree no longer than the larger branch is.</p>

<p>The tree is a familiar <a href="http://en.wikipedia.org/wiki/Archetype" title="archetype">archetype</a>. One can find similar instances of this archetype in other systems, from the <a href="http://en.wikipedia.org/wiki/Tree_of_life_(biology)" title="tree of life">pattern of evolution</a> to <a href="http://en.wikipedia.org/wiki/Binary_tree" title="binary tree">data structures</a> in computer science. There is some utility in finding these archetypes and understanding them. We may find new insights into how to think about evolution, data storage, etc., by mining pre-existing sources of knowledge on similar systems. There is some risk associated with this behavior as well. It is always tempting to over-fit the metaphor and see <a href="http://en.wikipedia.org/wiki/Homology_(biology)" title="homology">homology</a> where there is no functional similarity.</p>

<p>I intend to use this site as a place to contain my thoughts on such matters, as well as a repository for my various projects. I will post on aspects of my projects that may illustrate the archetypes involved in software development and the design and implementation of systems in general. A primary source of inspiration for this site, including the title, is the book <a href="http://www.amazon.com/gp/product/0195019199/ref=as_li_ss_tl?ie=UTF8&amp;tag=archetypal-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0195019199" title="pattern language">A Pattern Language: Towns, Buildings, Construction</a> by Christopher Alexander.</p>
]]></content>
  </entry>
  
</feed>
