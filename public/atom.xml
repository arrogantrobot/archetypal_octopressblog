<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Archetypal]]></title>
  <link href="http://archetyp.al/atom.xml" rel="self"/>
  <link href="http://archetyp.al/"/>
  <updated>2012-08-13T19:49:29-05:00</updated>
  <id>http://archetyp.al/</id>
  <author>
    <name><![CDATA[Rob Long]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Convert your 23andme raw data into VCF format]]></title>
    <link href="http://archetyp.al/blog/2012/08/13/convert-your-23andme-raw-data-into-vcf-format/"/>
    <updated>2012-08-13T18:36:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/08/13/convert-your-23andme-raw-data-into-vcf-format</id>
    <content type="html"><![CDATA[<p>A week ago I received my results from <a href="http://www.23andme.com" title="23andme.com">23andme.com</a>. Aside from the obvious points of interest, health risks, heritage, neanderthal composition, etc., I was also interested in getting my own data in raw format. While 23andme does provide a way to download your &#8220;raw&#8221; data, they are not really providing raw data. One cannot access the image data from the microarray sequencer that they used. What they do provide is formatted as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># rsid  chromosome  position    genotype
</span><span class='line'>rs4477212   1   82154   TT
</span><span class='line'>rs3094315   1   752566  TC
</span><span class='line'>rs3131972   1   752721  AA
</span><span class='line'>rs12124819  1   776546  AC
</span><span class='line'>rs11240777  1   798959  GA
</span><span class='line'>rs6681049   1   800007  CC</span></code></pre></td></tr></table></div></figure>


<p>Rows that begin with a &#8216;#&#8217; are header rows, of which, there may be as many as you please. 23andme puts some data in here, like which reference the coordinates are based on. This is an interesting topic as the build being used has just recently changed from hg18 to hg19. If you downloaded your raw data before August 9, 2012, you have hg18, after, and you have hg19. However, someone forgot to update the header to reflect this, so it still reads &#8220;build36&#8221;.</p>

<p>The rsid column is a unique identifier for reference SNP identifier from <a href="http://www.ncbi.nlm.nih.gov/SNP/get_html.cgi?whichHtml=how_to_submit#REFSNP" title="dbSNP">dbSNP</a>. These identifiers were more useful before the completion of the human genome project, as there was no coordinate system capable of resolving the locations of these various SNP&#8217;s. Now it is possible to address them like you might address a house, with the State or City being analogous to the chromosome and the street address being analogous to the &#8220;position&#8221;. The position is the number of bases from the beginning of the chromosome that a SNP is located at.</p>

<p>The final column is the genotype at the listed address. There are two bases listed because humans have two copies of each chromosome.</p>

<h2>VCF Format</h2>

<p>So this leaves us with a list of addresses. This is well and good, but many bioinformatics applications use a different format, not all that different, called the <a href="http://www.1000genomes.org/wiki/Analysis/Variant%20Call%20Format/vcf-variant-call-format-version-41" title="VCF format">&#8220;Variant Call Format&#8221;</a>. Specifically, a tool for predicting the biological effects of mutations (bases different than the reference bases), uses the VCF format. It is <a href="http://snpeff.sourceforge.net/" title="snpEff">snpEff</a>, or SNP effect predictor.</p>

<p>In order to facilitate the use of the various and sundry tools that use the VCF format, I have made a tool for converting the 23andme raw format to VCF. It is the <a href="https://github.com/arrogantrobot/23andme2vcf" title="23andme2vcf converter">23andme2vcf converter</a>. In order to use it, follow these steps:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/arrogantrobot/23andme2vcf.git
</span><span class='line'>cd 23andme2vcf
</span><span class='line'>perl 23andme2vcf.pl /path/to/23andme/raw/data.zip /desired/path/to/output.vcf</span></code></pre></td></tr></table></div></figure>


<p>If you do not use git, you may download the tarball from <a href="https://github.com/arrogantrobot/23andme2vcf/tarball/master" title="23andme2vcf converter tarball">github</a>, unpack it, and run line 3 of the above commands.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cae.js: hand it a canvas and stand back]]></title>
    <link href="http://archetyp.al/blog/2012/07/16/cae-dot-js-hand-it-a-canvas-and-stand-back/"/>
    <updated>2012-07-16T20:49:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/07/16/cae-dot-js-hand-it-a-canvas-and-stand-back</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/arrogantrobot/cae.js" title="cae.js">cae.js project</a> is a distillation of the cellular automaton built into the earlier <a href="https://github.com/arrogantrobot/Cellular-Automata-Explorer" title="cellular automata explorer">cellular automata explorer</a> project. It is a self-contained <a href="http://www.webmonkey.com/2010/02/make_oop_classes_in_javascript/" title="functions all the way down">javascript class</a>. It can instantiated thusly:</p>

<p>First, include the cae.js source in your html:</p>

<figure class='code'><figcaption><span>include cae.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/javascripts/cae.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then create an instance of cae:</p>

<figure class='code'><figcaption><span>create a new cae object and start it  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">my_cae</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">cae</span><span class="p">();</span>
</span><span class='line'><span class="nx">my_cae</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="s2">&quot;my_canvas&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">my_cae</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it. Just replace &#8220;my_canvas&#8221; with the id of the canvas you&#8217;d like cae to draw upon, and it will determine the proper width and height. There are a few more moving pieces to fiddle with if you like.</p>

<p>First, frames per second:</p>

<figure class='code'><figcaption><span>frames per second  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">my_cae</span><span class="p">.</span><span class="nx">setFramesPerSecond</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Depending upon your processor and browser, your outcome will vary greatly.</p>

<p>You can also set the number of pixels per cell:</p>

<figure class='code'><figcaption><span>pixels per cell  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">my_cae</span><span class="p">.</span><span class="nx">setPixelsPerCell</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The lower limit for pixels per cell is 1, with the upper limit being the min of the width and height of your canvas. Though one cell is going to make for a pretty boring display. Actually, now that I think of it, this would cause the cell to be its own neighbor&#8230;</p>

<p><canvas id="my_canvas" width="100" height="100"></canvas></p>

<script type="text/javascript">
    my_cae = new cae();
    my_cae.setPixelsPerCell(100);
    my_cae.init("my_canvas");
    my_cae.draw();
</script>


<p>I admit, it&#8217;s not very exciting. I think I just invented the zero-dimensional cellular automata.</p>

<p>Now to something much more exciting:</p>

<p><canvas id="my_other_canvas" width="300" height="700"></canvas></p>

<script type="text/javascript">
    my_other_cae = new cae();
    my_other_cae.setPixelsPerCell(5);
    my_other_cae.init("my_other_canvas");
    my_other_cae.draw();
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress CoderWall Aside]]></title>
    <link href="http://archetyp.al/blog/2012/07/08/octopress-coderwall-aside/"/>
    <updated>2012-07-08T22:22:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/07/08/octopress-coderwall-aside</id>
    <content type="html"><![CDATA[<p>While attempting to embed the coderwall badges via the <a href="http://coderwall.com/api#blogbadge" title="coderwall badges">provided coderwall includes</a>, I found that the default coderwall css/javascript was not playing nicely with octopress. So, to the internets! There I found a nice post on this very topic, from the <a href="http://kagekirin.github.com/blog/2012/02/22/playing-with-octopress-custom-asides/" title="Code Alchemist">Code Alchemist</a> blog. He rolled his own solution, which even includes an &#8220;endorse&#8221; button. Not bad. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archetypical Post]]></title>
    <link href="http://archetyp.al/blog/2012/07/08/archetypical-post/"/>
    <updated>2012-07-08T13:04:00-05:00</updated>
    <id>http://archetyp.al/blog/2012/07/08/archetypical-post</id>
    <content type="html"><![CDATA[<p>Picture a tree. Let&#8217;s make it an <a href="http://en.wikipedia.org/wiki/Oak" title="Oak tree">oak tree</a>, so most people in the northern hemisphere will have direct access to one. Over the course of the oak tree&#8217;s life, it increases in size gradually, with new branches, sub-branches, and leaves appearing in that order of frequency. The trunk remains alive, but is less dynamic in it&#8217;s size and shape than the portions of the tree closer to the <a href="http://en.wikipedia.org/wiki/Tree_(data_structure)" title="Tree_(data_structure)">leaf-nodes</a>, to borrow a metaphor that seems dangerously recursive. New branches and leaves appear and disappear, each with a frequency entirely contained by the structure supporting it on the tree. All of the leaves growing from a specific branch will be around no longer than the branch itself is around. So it is with the branch as well. If our example branch is attached to another larger branch, it will be part of the tree no longer than the larger branch is.</p>

<p>The tree is a familiar <a href="http://en.wikipedia.org/wiki/Archetype" title="archetype">archetype</a>. One can find similar instances of this archetype in other systems, from the <a href="http://en.wikipedia.org/wiki/Tree_of_life_(biology)" title="tree of life">pattern of evolution</a> to <a href="http://en.wikipedia.org/wiki/Binary_tree" title="binary tree">data structures</a> in computer science. There is some utility in finding these archetypes and understanding them. We may find new insights into how to think about evolution, data storage, etc., by mining pre-existing sources of knowledge on similar systems. There is some risk associated with this behavior as well. It is always tempting to over-fit the metaphor and see <a href="http://en.wikipedia.org/wiki/Homology_(biology)" title="homology">homology</a> where there is no functional similarity.</p>

<p>I intend to use this site as a place to contain my thoughts on such matters, as well as a repository for my various projects. I will post on aspects of my projects that may illustrate the archetypes involved in software development and the design and implementation of systems in general. A primary source of inspiration for this site, including the title, is the book <a href="http://www.amazon.com/gp/product/0195019199/ref=as_li_ss_tl?ie=UTF8&amp;tag=archetypal-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0195019199" title="pattern language">A Pattern Language: Towns, Buildings, Construction</a> by Christopher Alexander.</p>
]]></content>
  </entry>
  
</feed>
